{
  "openapi": "3.0.1",
  "info": {
    "version": "v1",
    "title": "Orders API",
    "description": "The Orders API is providing services for managing payment orders."
  },
  "servers": [
    {
      "url": "https://apitest.payengine.de/v1",
      "description": "Test"
    },
    {
      "url": "https://api.payengine.de/v1",
      "description": "Live"
    }
  ],
  "paths": {
    "/orders": {
      "get": {
        "summary": "Get a list of orders",
        "description": "Endpoint to receive a list of available orders.\n\n\nThe following parameters can be used as filter.\n- terms\n- privacy\n- orderId\n- merchantOrderId\n- paymentProviderTransactionId\n- initialAmount\n- currency\n- customerId\n- ipAddress\n- status\n- channel\n- source\n- product\n- settled\n- settlementDate\n- createdAt\n- modifiedAt\n- lastOperation\n- email\n\n\nThe following parameters can be used as a range filter.\n\n\nDates:\n- terms\n- privacy\n- settlementDate\n- createdAt\n- modifiedAt\n\nNumbers:\n- initialAmount\n",
        "operationId": "Orders",
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderList"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create an order intent",
        "description": "Endpoint to create an order intent.\n\nThis service will create a new order incl. all order details with status CREATED and returns a corresponding orderId.\n\nThe order intent is required for Payengine widget solutions which need an orderId as an input in order to execute an order at the end of the process.\n",
        "operationId": "getOrders",
        "requestBody": {
          "description": "Request body to create a order intent.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/orders/{orderId}": {
      "get": {
        "summary": "Get an order",
        "description": "Endpoint to receive a specific order referencing the orderId.\n\nThe returned order object includes all details and transactions of the whole lifecycle of the order.\n",
        "operationId": "getOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the specific order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDebitSuccessfulResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found caused by invalid input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersGetNotFound"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Update an order",
        "description": "Endpoint to update an order intent referencing the orderId.\n\n\nThis service can be used for updating order details as long as the order is still in status CREATED.\n",
        "operationId": "OrdersByOrderId1",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the specific order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body for updating an order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/orders/preauth": {
      "post": {
        "summary": "Preauthorize an order",
        "description": "An endpoint used to initiate a preauthorization of an order.\nA preauth transaction only authorizes a payment and for certain methods also reserves the authorized amount. However no cash flow will be triggered as long as no corresponding capture transaction is initiated at a later stage.\n\nThere are 2 workflows to process a preauth: ASYNC and SYNC.\n\nWith SYNC payment methods the transaction will directly result in a OK/SUCCESS or a negative status. With ASYNC payment methods the transaction will result in a PENDING or FAILURE/DECLINED/ABORTED status.\n\nThe integrating system needs to redirect the shopper to the redirectUrl After the shopper completes the payment action the transaction status will change accordingly and the integrator can query the updated status.\n",
        "operationId": "createPreauthOrder",
        "requestBody": {
          "description": "Request body for creating a preauth.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderOpenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderPreauthPendingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request caused by invalid input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersPreauthPostBadRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/orders/debit": {
      "post": {
        "summary": "Debit an order",
        "description": "An endpoint used to initiate a debit of an order.\n\nThe debit transaction authorizes the payment and triggers the cash flow as the money will be debited from the end customer account.\n\nNo further capture transaction is required anymore afterwards.\n\nThere are 2 workflows to process a debit: ASYNC and SYNC.\n\nWith SYNC payment methods the transaction will directly result in a OK/SUCCESS or a negative status.\n\nWith ASYNC payment methods the transaction will result in a PENDING or FAILURE/DECLINED/ABORTED status.\n\nIf the status of the transaction is in PENDING the response will contain a redirectUrl.\n\nThe integrating system needs to redirect the shopper to the redirectUrl.\n\nAfter the shopper completes the payment action the transaction status will change accordingly and the integrator can query the updated status.\n",
        "operationId": "createDebitOrder",
        "requestBody": {
          "description": "Request body for creating a debit.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderOpenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDebitPendingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request caused by invalid input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersDebitPostBadRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "OrderList": {
        "title": "OrderList",
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "description": "A list of orders.",
            "items": {
              "$ref": "#/components/schemas/OrderDebitSuccessfulResponse"
            }
          },
          "totalPages": {
            "minimum": 1,
            "type": "number",
            "description": "A counter for the total pages returned.",
            "format": "int"
          }
        }
      },
      "OrderCreateRequest": {
        "title": "OrderCreateRequest",
        "required": [
          "async",
          "currency",
          "initialAmount",
          "transactionType"
        ],
        "type": "object",
        "properties": {
          "initialAmount": {
            "type": "number",
            "description": "Amount as smallest currency unit\ne.g 100 EUR will be result in amount = 10000\n",
            "format": "int"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217"
          },
          "async": {
            "$ref": "#/components/schemas/Async"
          },
          "transactionType": {
            "$ref": "#/components/schemas/InitialTransactionTypeBaseTypeEnum"
          },
          "terms": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your terms and conditions. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "privacy": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your privacy policy. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "merchantOrderId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from your system/shop for Creditcards only 30 alphanumeric characters."
          },
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The description from your system/shop of this order."
          },
          "statementDescription": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The statement description from your system/shop of this order."
          },
          "basket": {
            "type": "array",
            "description": "The basket of your order. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "customer": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The customer id which will be used to process this order."
          },
          "persona": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The persona id which will be used to process this order. note: the persona must be a persona from the given customer."
          },
          "billingAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The address id used as billing address for this order."
          },
          "shippingAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The address id used as shipping address for this order."
          },
          "ipAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)"
          },
          "channel": {
            "$ref": "#/components/schemas/ChannelsBaseTypeEnum"
          },
          "source": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The source is a form free descriptor of the origin."
          },
          "allowedProducts": {
            "type": "array",
            "description": "A List of all valid products for this order.",
            "items": {
              "$ref": "#/components/schemas/ProductsBaseTypeEnum"
            }
          },
          "locale": {
            "type": "string",
            "description": "Language tag consisting of a two-letter language code combined with a two-letter country code according to RFC 1766. Examples: en-US, en-GB. Only for PayPal, Union Pay and WeChat Pay."
          },
          "risk": {
            "$ref": "#/components/schemas/Risk"
          }
        },
        "example": {
          "initialAmount": 119,
          "basket": [
            {
              "name": "Usb lighter",
              "articleNumber": "420",
              "totalPrice": 100,
              "totalPriceWithTax": 119,
              "unitPrice": 100,
              "unitPriceWithTax": 119,
              "tax": 19,
              "quantity": 1
            }
          ],
          "currency": "EUR",
          "async": {
            "successUrl": "https://www.success-page.com",
            "failureUrl": "https://www.failure-page.com",
            "cancelUrl": "https://www.cancel-page.com"
          },
          "transactionType": "DEBIT",
          "customer": "customer_lhuf76o8pe",
          "persona": "persona_jekw3r5e4m",
          "billingAddress": "address_1ulqutehx3",
          "shippingAddress": "address_1ulqutehx3",
          "ipAddress": "84.43.242.13",
          "source": "Postman test",
          "merchantOrderId": "merchantOrderId_1629103141",
          "channel": "ECOM",
          "allowedProducts": [
            "creditcard"
          ]
        }
      },
      "OrderCreateResponse": {
        "title": "OrderCreateResponse",
        "type": "object",
        "properties": {
          "orderId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from payengine."
          },
          "initialAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The initial amount given to create this order.",
            "format": "int"
          },
          "preauthorizedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been authorized.",
            "format": "int"
          },
          "capturedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been captured.",
            "format": "int"
          },
          "refundedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been refunded.",
            "format": "int"
          },
          "canceledAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been cancelled.",
            "format": "int"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217"
          },
          "transactions": {
            "type": "array",
            "description": "A list of all underlying transactions.",
            "items": {
              "$ref": "#/components/schemas/TransactionResponseChildren"
            }
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatesBaseTypeEnum"
          },
          "channel": {
            "$ref": "#/components/schemas/ChannelsBaseTypeEnum"
          },
          "createdAt": {
            "type": "number",
            "description": "This timestamp indicates the creation of this order.",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "number",
            "description": "This timestamp indicates the last modification of this order.",
            "format": "date-time"
          },
          "terms": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your terms and conditions. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "privacy": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your privacy policy. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "merchantOrderId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from your system/shop for Creditcards only 30 alphanumeric characters."
          },
          "paymentProviderTransactionId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from the payment provider."
          },
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The description from your system/shop of this order."
          },
          "statementDescription": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The statement description from your system/shop of this order."
          },
          "basket": {
            "type": "array",
            "description": "The basket of your order. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerResponse"
          },
          "persona": {
            "$ref": "#/components/schemas/PersonaResponse"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "ipAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)"
          },
          "paymentInstrument": {
            "$ref": "#/components/schemas/PaymentInstrumentResponse"
          },
          "redirectUrl": {
            "maxLength": 2048,
            "minLength": 6,
            "type": "string",
            "description": "The URL which the customer needs to be redirected to.",
            "format": "url"
          },
          "source": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The source of the order."
          },
          "product": {
            "$ref": "#/components/schemas/ProductsBaseTypeEnum"
          },
          "allowedProducts": {
            "type": "array",
            "description": "A List of all valid products for this order.",
            "items": {
              "$ref": "#/components/schemas/ProductsBaseTypeEnum"
            }
          },
          "settled": {
            "type": "boolean",
            "description": "A flag which indicates if this order has been settled or not."
          },
          "settlementDate": {
            "type": "string",
            "description": "The date of the settlement.",
            "format": "date-time"
          },
          "transactionType": {
            "$ref": "#/components/schemas/InitialTransactionTypeBaseTypeEnum"
          },
          "deviceIdent": {
            "$ref": "#/components/schemas/DeviceIdentResponse"
          },
          "meta": {
            "$ref": "#/components/schemas/OrderMetaInfResponse"
          },
          "lastOperation": {
            "$ref": "#/components/schemas/LastOperationTypeEnum"
          }
        },
        "example": {
          "createdAt": 1628602396207,
          "modifiedAt": 1628602396207,
          "merchantId": "Merchant-11111111-1111-1111-1111-111111111111",
          "orderId": "oa1afzk8li",
          "merchantOrderId": "merchantOrderId_1629103141",
          "paymentProviderTransactionId": null,
          "description": null,
          "statementDescription": null,
          "initialAmount": 119,
          "preauthorizedAmount": 0,
          "capturedAmount": 0,
          "refundedAmount": 0,
          "canceledAmount": 0,
          "currency": "EUR",
          "basket": [
            {
              "id": "Article-e018ab5d-1b60-40f2-9ae6-7497d1c615b7",
              "name": "Usb lighter",
              "articleNumber": "420",
              "totalPrice": 100,
              "totalPriceWithTax": 119,
              "unitPrice": 100,
              "unitPriceWithTax": 119,
              "quantity": 1,
              "tax": 19,
              "discount": null,
              "imageUrl": null,
              "articleUrl": null,
              "articleType": null
            }
          ],
          "customer": {
            "merchantCustomerId": "1628601092",
            "organizationRegistrationRegister": null,
            "organizationRegistrationId": null,
            "organizationEntityType": null,
            "organizationVatId": null,
            "companyName": null,
            "reference": null,
            "email": "1628601092@test.com",
            "customerId": "customer_lhuf76o8pe",
            "addresses": [],
            "personas": [],
            "paymentInstruments": [],
            "createdAt": 1628601092685,
            "modifiedAt": 1628601092685,
            "customerType": null
          },
          "persona": {
            "personaId": "persona_jekw3r5e4m",
            "firstName": "Max",
            "lastName": "Last Name",
            "phone": "00493012346",
            "mobile": "00493012345",
            "fax": "00493012345",
            "birthday": 358293600000,
            "gender": "MALE",
            "title": "Prof. Dr.",
            "createdAt": 1628601096583,
            "modifiedAt": 1628601096583
          },
          "billingAddress": {
            "firstName": "Max",
            "lastName": "Maxx",
            "street": "Musterweg",
            "houseNumber": "32424",
            "city": "Musterhausen",
            "zip": "12345",
            "country": "DE",
            "state": "Bayern",
            "phone": "00493012345",
            "fax": "00493012345",
            "mobile": "00493012345",
            "title": "Prof. Dr.",
            "additionalDetails": "premium buyer",
            "addressId": "address_1ulqutehx3",
            "createdAt": 1628601099865,
            "modifiedAt": 1628601099865
          },
          "shippingAddress": {
            "firstName": "Max",
            "lastName": "Maxx",
            "street": "Musterweg",
            "houseNumber": "32424",
            "city": "Musterhausen",
            "zip": "12345",
            "country": "DE",
            "state": "Bayern",
            "phone": "00493012345",
            "fax": "00493012345",
            "mobile": "00493012345",
            "title": "Prof. Dr.",
            "additionalDetails": "premium buyer",
            "addressId": "address_1ulqutehx3",
            "createdAt": 1628601099865,
            "modifiedAt": 1628601099865
          },
          "ipAddress": "84.43.242.13",
          "paymentInstrument": null,
          "transactions": [],
          "status": "CREATED",
          "channel": "ECOM",
          "source": "Postman test",
          "settled": false,
          "settlementDate": null,
          "allowedProducts": [
            "creditcard"
          ],
          "product": null,
          "transactionType": "DEBIT",
          "meta": null,
          "async": {
            "successUrl": "https://www.success-page.com",
            "failureUrl": "https://www.failure-page.com",
            "cancelUrl": "https://www.cancel-page.com",
            "confirmUrl": null
          },
          "deviceIdent": null,
          "clientType": "BRW",
          "asyncNotificationSubscriptionId": null,
          "lastOperation": "ORDER_CREATED",
          "locale": null,
          "risk": null
        }
      },
      "OrderDebitPendingResponse": {
        "title": "OrderDebitPendingResponse",
        "type": "object",
        "properties": {
          "orderId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from payengine."
          },
          "initialAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The initial amount given to create this order.",
            "format": "int"
          },
          "preauthorizedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been authorized.",
            "format": "int"
          },
          "capturedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been captured.",
            "format": "int"
          },
          "refundedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been refunded.",
            "format": "int"
          },
          "canceledAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been cancelled.",
            "format": "int"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217"
          },
          "transactions": {
            "type": "array",
            "description": "A list of all underlying transactions.",
            "items": {
              "$ref": "#/components/schemas/TransactionResponseChildren"
            }
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatesBaseTypeEnum"
          },
          "channel": {
            "$ref": "#/components/schemas/ChannelsBaseTypeEnum"
          },
          "createdAt": {
            "type": "number",
            "description": "This timestamp indicates the creation of this order.",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "number",
            "description": "This timestamp indicates the last modification of this order.",
            "format": "date-time"
          },
          "terms": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your terms and conditions. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "privacy": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your privacy policy. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "merchantOrderId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from your system/shop for Creditcards only 30 alphanumeric characters."
          },
          "paymentProviderTransactionId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from the payment provider."
          },
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The description from your system/shop of this order."
          },
          "statementDescription": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The statement description from your system/shop of this order."
          },
          "basket": {
            "type": "array",
            "description": "The basket of your order. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerResponse"
          },
          "persona": {
            "$ref": "#/components/schemas/PersonaResponse"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "ipAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)"
          },
          "paymentInstrument": {
            "$ref": "#/components/schemas/PaymentInstrumentResponse"
          },
          "redirectUrl": {
            "maxLength": 2048,
            "minLength": 6,
            "type": "string",
            "description": "The URL which the customer needs to be redirected to.",
            "format": "url"
          },
          "source": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The source of the order."
          },
          "product": {
            "$ref": "#/components/schemas/ProductsBaseTypeEnum"
          },
          "allowedProducts": {
            "type": "array",
            "description": "A List of all valid products for this order.",
            "items": {
              "$ref": "#/components/schemas/ProductsBaseTypeEnum"
            }
          },
          "settled": {
            "type": "boolean",
            "description": "A flag which indicates if this order has been settled or not."
          },
          "settlementDate": {
            "type": "string",
            "description": "The date of the settlement.",
            "format": "date-time"
          },
          "transactionType": {
            "$ref": "#/components/schemas/InitialTransactionTypeBaseTypeEnum"
          },
          "deviceIdent": {
            "$ref": "#/components/schemas/DeviceIdentResponse"
          },
          "meta": {
            "$ref": "#/components/schemas/OrderMetaInfResponse"
          },
          "lastOperation": {
            "$ref": "#/components/schemas/LastOperationTypeEnum"
          }
        },
        "example": {
          "createdAt": 1629104656477,
          "modifiedAt": 1629104656551,
          "merchantId": "merchant_teewdiocca",
          "terms": null,
          "privacy": null,
          "orderId": "n0y7lbshfk",
          "merchantOrderId": "merchantOrderId_1629103141",
          "paymentProviderTransactionId": null,
          "description": "description",
          "statementDescription": "statement description",
          "initialAmount": 100,
          "preauthorizedAmount": 0,
          "capturedAmount": 0,
          "refundedAmount": 0,
          "canceledAmount": 0,
          "currency": "EUR",
          "basket": [],
          "customer": {
            "merchantCustomerId": null,
            "organizationRegistrationRegister": null,
            "organizationRegistrationId": null,
            "organizationEntityType": null,
            "organizationVatId": null,
            "companyName": null,
            "reference": null,
            "email": null,
            "customerId": "customer_hfdkjjmyxj",
            "addresses": [],
            "personas": [],
            "paymentInstruments": [],
            "createdAt": 1629104656478,
            "modifiedAt": 1629104656478,
            "customerType": null
          },
          "persona": null,
          "billingAddress": null,
          "shippingAddress": null,
          "ipAddress": "192.168.0.1",
          "paymentInstrument": {
            "createdAt": 1629104652225,
            "modifiedAt": 1629104652254,
            "paymentInstrumentId": "paymentinstrument_q5uowikf9j",
            "merchantPaymentInstrumentId": null,
            "attributes": {
              "cardHolder": "Max Mustermann",
              "cardNumber": "************1111",
              "brand": "VISA",
              "expiryMonth": "12",
              "expiryYear": "30",
              "issuerCountry": "US",
              "cofContracts": []
            },
            "encrypted": true,
            "origin": "creditcard",
            "type": "creditcard",
            "recurring": true
          },
          "transactions": [
            {
              "createdAt": 1629104656479,
              "modifiedAt": 1629104656551,
              "type": "DEBIT",
              "transactionId": "transaction_vb09zylpji",
              "description": "description",
              "initialAmount": 100,
              "refundedAmount": 0,
              "currency": "EUR",
              "status": "PENDING",
              "order": "n0y7lbshfk",
              "parentTransaction": null,
              "transactions": null,
              "basket": [],
              "providerCode": null,
              "merchantMessage": null,
              "customerMessage": null,
              "descriptor": null,
              "meta": null,
              "challenge": null,
              "asyncNotificationSubscriptionId": null,
              "tracking": null
            }
          ],
          "status": "OPEN",
          "channel": "ECOM",
          "source": null,
          "settled": false,
          "settlementDate": null,
          "allowedProducts": null,
          "product": "creditcard",
          "transactionType": "DEBIT",
          "meta": {
            "threeDsData": {
              "authenticationResult": {
                "version": null,
                "transactionId": null,
                "status": null,
                "redirectUrl": "https://pptest.payengine.de/three-ds-v2-order/merchant_teewdiocca/n0y7lbshfk",
                "eci": null,
                "authenticationValue": null,
                "challengeData": null,
                "statusReason": null,
                "forceChallenge": false,
                "correlationId": null,
                "cardholderInfo": null
              }
            }
          },
          "async": null,
          "deviceIdent": null,
          "clientType": "BRW",
          "asyncNotificationSubscriptionId": null,
          "lastOperation": "TRANSACTION_DEBIT_PENDING",
          "locale": null,
          "risk": null,
          "redirectUrl": "https://pptest.payengine.de/three-ds-v2-order/merchant_teewdiocca/n0y7lbshfk"
        }
      },
      "OrderDebitSuccessfulResponse": {
        "title": "OrderDebitSuccessfulResponse",
        "type": "object",
        "properties": {
          "orderId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from payengine."
          },
          "initialAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The initial amount given to create this order.",
            "format": "int"
          },
          "preauthorizedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been authorized.",
            "format": "int"
          },
          "capturedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been captured.",
            "format": "int"
          },
          "refundedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been refunded.",
            "format": "int"
          },
          "canceledAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been cancelled.",
            "format": "int"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217"
          },
          "transactions": {
            "type": "array",
            "description": "A list of all underlying transactions.",
            "items": {
              "$ref": "#/components/schemas/TransactionResponseChildren"
            }
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatesBaseTypeEnum"
          },
          "channel": {
            "$ref": "#/components/schemas/ChannelsBaseTypeEnum"
          },
          "createdAt": {
            "type": "number",
            "description": "This timestamp indicates the creation of this order.",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "number",
            "description": "This timestamp indicates the last modification of this order.",
            "format": "date-time"
          },
          "terms": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your terms and conditions. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "privacy": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your privacy policy. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "merchantOrderId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from your system/shop for Creditcards only 30 alphanumeric characters."
          },
          "paymentProviderTransactionId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from the payment provider."
          },
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The description from your system/shop of this order."
          },
          "statementDescription": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The statement description from your system/shop of this order."
          },
          "basket": {
            "type": "array",
            "description": "The basket of your order. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerResponse"
          },
          "persona": {
            "$ref": "#/components/schemas/PersonaResponse"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "ipAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)"
          },
          "paymentInstrument": {
            "$ref": "#/components/schemas/PaymentInstrumentResponse"
          },
          "redirectUrl": {
            "maxLength": 2048,
            "minLength": 6,
            "type": "string",
            "description": "The URL which the customer needs to be redirected to.",
            "format": "url"
          },
          "source": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The source of the order."
          },
          "product": {
            "$ref": "#/components/schemas/ProductsBaseTypeEnum"
          },
          "allowedProducts": {
            "type": "array",
            "description": "A List of all valid products for this order.",
            "items": {
              "$ref": "#/components/schemas/ProductsBaseTypeEnum"
            }
          },
          "settled": {
            "type": "boolean",
            "description": "A flag which indicates if this order has been settled or not."
          },
          "settlementDate": {
            "type": "string",
            "description": "The date of the settlement.",
            "format": "date-time"
          },
          "transactionType": {
            "$ref": "#/components/schemas/InitialTransactionTypeBaseTypeEnum"
          },
          "deviceIdent": {
            "$ref": "#/components/schemas/DeviceIdentResponse"
          },
          "meta": {
            "$ref": "#/components/schemas/OrderMetaInfResponse"
          },
          "lastOperation": {
            "$ref": "#/components/schemas/LastOperationTypeEnum"
          }
        },
        "example": {
          "createdAt": 1629103140721,
          "modifiedAt": 1629103149638,
          "merchantId": "merchant_teewdiocca",
          "terms": null,
          "privacy": null,
          "orderId": "5fqq0rpzyt",
          "merchantOrderId": "merchantOrderId_1629103141",
          "paymentProviderTransactionId": "437663",
          "description": "description",
          "statementDescription": "statement description",
          "initialAmount": 100,
          "preauthorizedAmount": 100,
          "capturedAmount": 100,
          "refundedAmount": 0,
          "canceledAmount": 0,
          "currency": "EUR",
          "basket": [],
          "customer": {
            "merchantCustomerId": null,
            "organizationRegistrationRegister": null,
            "organizationRegistrationId": null,
            "organizationEntityType": null,
            "organizationVatId": null,
            "companyName": null,
            "reference": null,
            "email": null,
            "customerId": "customer_mequjl0asy",
            "addresses": [],
            "personas": [],
            "paymentInstruments": [],
            "createdAt": 1629103140721,
            "modifiedAt": 1629103140721,
            "customerType": null
          },
          "persona": null,
          "billingAddress": null,
          "shippingAddress": null,
          "ipAddress": "192.168.0.1",
          "paymentInstrument": {
            "createdAt": 1629103029015,
            "modifiedAt": 1629103029044,
            "paymentInstrumentId": "paymentinstrument_8kuwtqmtip",
            "merchantPaymentInstrumentId": null,
            "attributes": {
              "cardHolder": "Max Mustermann",
              "cardNumber": "************1111",
              "brand": "VISA",
              "expiryMonth": "12",
              "expiryYear": "30",
              "issuerCountry": "US",
              "cofContracts": []
            },
            "encrypted": true,
            "origin": "creditcard",
            "type": "creditcard",
            "recurring": true
          },
          "transactions": [
            {
              "createdAt": 1629103140722,
              "modifiedAt": 1629103149638,
              "type": "DEBIT",
              "transactionId": "transaction_ubv32bsdja",
              "description": "description",
              "initialAmount": 100,
              "refundedAmount": 0,
              "currency": "EUR",
              "status": "SUCCESS",
              "order": "5fqq0rpzyt",
              "parentTransaction": null,
              "transactions": null,
              "basket": [],
              "providerCode": "00",
              "merchantMessage": null,
              "customerMessage": null,
              "descriptor": null,
              "meta": null,
              "challenge": null,
              "asyncNotificationSubscriptionId": null,
              "tracking": []
            }
          ],
          "status": "OPEN",
          "channel": "ECOM",
          "source": null,
          "settled": false,
          "settlementDate": null,
          "allowedProducts": [],
          "product": "creditcard",
          "transactionType": "DEBIT",
          "meta": {
            "paresStatus": "Y",
            "threeDsData": {
              "authenticationResult": {
                "version": "2.0",
                "transactionId": "c9339755-ef22-4dec-8c9b-79d78e27a0cb",
                "status": "Y",
                "redirectUrl": "https://pptest.payengine.de/three-ds-v2-order/merchant_teewdiocca/5fqq0rpzyt",
                "eci": "05",
                "authenticationValue": "MTIzNDU2Nzg5MDA5ODc2NTQkokW=",
                "challengeData": null,
                "statusReason": null,
                "forceChallenge": false,
                "correlationId": "33bd81b0-1e2a-430d-a3bc-7e1859999f99",
                "cardholderInfo": null
              }
            },
            "schemeTraceId": "448919738167396"
          },
          "async": {
            "successUrl": "https://www.success-page.com",
            "failureUrl": "https://www.failure-page.com",
            "cancelUrl": "https://www.cancel-page.com",
            "confirmUrl": null
          },
          "deviceIdent": null,
          "clientType": "BRW",
          "asyncNotificationSubscriptionId": null,
          "lastOperation": "TRANSACTION_DEBIT_SUCCESS",
          "locale": null,
          "risk": null
        }
      },
      "OrderPreauthPendingResponse": {
        "title": "OrderPreauthPendingResponse",
        "type": "object",
        "properties": {
          "orderId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from payengine."
          },
          "initialAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The initial amount given to create this order.",
            "format": "int"
          },
          "preauthorizedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been authorized.",
            "format": "int"
          },
          "capturedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been captured.",
            "format": "int"
          },
          "refundedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been refunded.",
            "format": "int"
          },
          "canceledAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been cancelled.",
            "format": "int"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217"
          },
          "transactions": {
            "type": "array",
            "description": "A list of all underlying transactions.",
            "items": {
              "$ref": "#/components/schemas/TransactionResponseChildren"
            }
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatesBaseTypeEnum"
          },
          "channel": {
            "$ref": "#/components/schemas/ChannelsBaseTypeEnum"
          },
          "createdAt": {
            "type": "number",
            "description": "This timestamp indicates the creation of this order.",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "number",
            "description": "This timestamp indicates the last modification of this order.",
            "format": "date-time"
          },
          "terms": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your terms and conditions. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "privacy": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your privacy policy. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "merchantOrderId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from your system/shop for Creditcards only 30 alphanumeric characters."
          },
          "paymentProviderTransactionId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from the payment provider."
          },
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The description from your system/shop of this order."
          },
          "statementDescription": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The statement description from your system/shop of this order."
          },
          "basket": {
            "type": "array",
            "description": "The basket of your order. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerResponse"
          },
          "persona": {
            "$ref": "#/components/schemas/PersonaResponse"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "ipAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)"
          },
          "paymentInstrument": {
            "$ref": "#/components/schemas/PaymentInstrumentResponse"
          },
          "redirectUrl": {
            "maxLength": 2048,
            "minLength": 6,
            "type": "string",
            "description": "The URL which the customer needs to be redirected to.",
            "format": "url"
          },
          "source": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The source of the order."
          },
          "product": {
            "$ref": "#/components/schemas/ProductsBaseTypeEnum"
          },
          "allowedProducts": {
            "type": "array",
            "description": "A List of all valid products for this order.",
            "items": {
              "$ref": "#/components/schemas/ProductsBaseTypeEnum"
            }
          },
          "settled": {
            "type": "boolean",
            "description": "A flag which indicates if this order has been settled or not."
          },
          "settlementDate": {
            "type": "string",
            "description": "The date of the settlement.",
            "format": "date-time"
          },
          "transactionType": {
            "$ref": "#/components/schemas/InitialTransactionTypeBaseTypeEnum"
          },
          "deviceIdent": {
            "$ref": "#/components/schemas/DeviceIdentResponse"
          },
          "meta": {
            "$ref": "#/components/schemas/OrderMetaInfResponse"
          },
          "lastOperation": {
            "$ref": "#/components/schemas/LastOperationTypeEnum"
          }
        },
        "example": {
          "createdAt": 1629104574909,
          "modifiedAt": 1629104574967,
          "merchantId": "merchant_teewdiocca",
          "terms": null,
          "privacy": null,
          "orderId": "mxvtzcj8dp",
          "merchantOrderId": "merchantOrderId_1629103141",
          "paymentProviderTransactionId": null,
          "description": "description",
          "statementDescription": "statement description",
          "initialAmount": 100,
          "preauthorizedAmount": 0,
          "capturedAmount": 0,
          "refundedAmount": 0,
          "canceledAmount": 0,
          "currency": "EUR",
          "basket": [],
          "customer": {
            "merchantCustomerId": null,
            "organizationRegistrationRegister": null,
            "organizationRegistrationId": null,
            "organizationEntityType": null,
            "organizationVatId": null,
            "companyName": null,
            "reference": null,
            "email": null,
            "customerId": "customer_qpd1wjrjhs",
            "addresses": [],
            "personas": [],
            "paymentInstruments": [],
            "createdAt": 1629104574910,
            "modifiedAt": 1629104574910,
            "customerType": null
          },
          "persona": null,
          "billingAddress": null,
          "shippingAddress": null,
          "ipAddress": "192.168.0.1",
          "paymentInstrument": {
            "createdAt": 1629104559055,
            "modifiedAt": 1629104559085,
            "paymentInstrumentId": "paymentinstrument_mdtrlc61tk",
            "merchantPaymentInstrumentId": null,
            "attributes": {
              "cardHolder": "Max Mustermann",
              "cardNumber": "************1111",
              "brand": "VISA",
              "expiryMonth": "12",
              "expiryYear": "30",
              "issuerCountry": "US",
              "cofContracts": []
            },
            "encrypted": true,
            "origin": "creditcard",
            "type": "creditcard",
            "recurring": true
          },
          "transactions": [
            {
              "createdAt": 1629104574911,
              "modifiedAt": 1629104574967,
              "type": "PREAUTH",
              "transactionId": "transaction_jmr2ajt0gu",
              "description": "description",
              "initialAmount": 100,
              "capturedAmount": 0,
              "canceledAmount": 0,
              "currency": "EUR",
              "status": "PENDING",
              "order": "mxvtzcj8dp",
              "parentTransaction": null,
              "transactions": null,
              "basket": [],
              "providerCode": null,
              "merchantMessage": null,
              "customerMessage": null,
              "descriptor": null,
              "meta": null,
              "challenge": null,
              "asyncNotificationSubscriptionId": null,
              "tracking": null
            }
          ],
          "status": "OPEN",
          "channel": "ECOM",
          "source": null,
          "settled": false,
          "settlementDate": null,
          "allowedProducts": null,
          "product": "creditcard",
          "transactionType": "PREAUTH",
          "meta": {
            "threeDsData": {
              "authenticationResult": {
                "version": null,
                "transactionId": null,
                "status": null,
                "redirectUrl": "https://pptest.payengine.de/three-ds-v2-order/merchant_teewdiocca/mxvtzcj8dp",
                "eci": null,
                "authenticationValue": null,
                "challengeData": null,
                "statusReason": null,
                "forceChallenge": false,
                "correlationId": null,
                "cardholderInfo": null
              }
            }
          },
          "async": null,
          "deviceIdent": null,
          "clientType": "BRW",
          "asyncNotificationSubscriptionId": null,
          "lastOperation": "TRANSACTION_PREAUTH_PENDING",
          "locale": null,
          "risk": null,
          "redirectUrl": "https://pptest.payengine.de/three-ds-v2-order/merchant_teewdiocca/mxvtzcj8dp"
        }
      },
      "OrdersGetNotFound": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "example": "v1/orders/order_asdfghjk"
          },
          "timestamp": {
            "type": "number",
            "format": "date-time",
            "example": 1603275671582
          },
          "status": {
            "type": "number",
            "example": 404
          },
          "message": {
            "type": "string",
            "example": "Error while loading order!"
          },
          "code": {
            "type": "number",
            "example": 12001
          },
          "globalTrackId": {
            "type": "string",
            "example": "Some Request ID"
          },
          "errors": {
            "title": "Errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrdersGetErrors"
            }
          }
        }
      },
      "OrderUpdateRequest": {
        "title": "OrderUpdateRequest",
        "type": "object",
        "properties": {
          "terms": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your terms and conditions. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "privacy": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your privacy policy. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "merchantOrderId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from your system/shop for Creditcards only 30 alphanumeric characters."
          },
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The description from your system/shop of this order."
          },
          "statementDescription": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The statement description from your system/shop of this order."
          },
          "initialAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "Amount as smallest currency unit\ne.g 100 EUR will be result in amount = 10000\n",
            "format": "int"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217"
          },
          "basket": {
            "type": "array",
            "description": "The basket of your order. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "customer": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The customer id which will be used to process this order."
          },
          "persona": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The persona id which will be used to process this order. note: the persona must be a persona from the given customer."
          },
          "billingAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The address id used as billing address for this order."
          },
          "shippingAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The address id used as shipping address for this order."
          },
          "ipAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)"
          },
          "channel": {
            "$ref": "#/components/schemas/ChannelsBaseTypeEnum"
          },
          "source": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The source is a form free descriptor of the origin."
          },
          "async": {
            "$ref": "#/components/schemas/Async"
          },
          "allowedProducts": {
            "type": "array",
            "description": "A List of all valid products for this order.",
            "items": {
              "$ref": "#/components/schemas/ProductsBaseTypeEnum"
            }
          },
          "transactionType": {
            "$ref": "#/components/schemas/InitialTransactionTypeBaseTypeEnum"
          },
          "risk": {
            "$ref": "#/components/schemas/Risk"
          },
          "executeOrder": {
            "type": "boolean",
            "description": "Paypal specific parameter. If true the order will be processed after the update. This property is used to finish the processing of order, when the Paypal debit or preauth is created with 'addressOverride=false'. Defaut is false."
          },
          "locale": {
            "type": "string",
            "description": "Language tag consisting of a two-letter language code combined with a two-letter country code according to RFC 1766. Examples: en-US, en-GB. Only for PayPal, Union Pay and WeChat Pay."
          }
        },
        "example": {
          "merchantOrderId": "merchantOrderId_1629103141"
        }
      },
      "OrderOpenRequest": {
        "title": "OrderOpenRequest",
        "required": [
          "async",
          "currency",
          "initialAmount",
          "product"
        ],
        "type": "object",
        "properties": {
          "initialAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "Amount as smallest currency unit\ne.g 100 EUR will be result in amount = 10000\n",
            "format": "int"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217\n"
          },
          "product": {
            "$ref": "#/components/schemas/ProductsBaseTypeEnum"
          },
          "async": {
            "$ref": "#/components/schemas/Async"
          },
          "terms": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your terms and conditions. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "privacy": {
            "type": "number",
            "description": "A timestamp in milliseconds of the approval of the customer to your privacy policy. E.g. this is required for RatePAY orders.",
            "format": "integer"
          },
          "merchantOrderId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The order id from your system/shop for Creditcards only 30 alphanumeric characters."
          },
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The description from your system/shop of this order."
          },
          "statementDescription": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The statement description from your system/shop of this order."
          },
          "basket": {
            "type": "array",
            "description": "The basket of your order. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "customer": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The customer id which will be used to process this order."
          },
          "persona": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The persona id which will be used to process this order. note: the persona must be a persona from the given customer."
          },
          "billingAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The address id used as billing address for this order."
          },
          "shippingAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The address id used as shipping address for this order."
          },
          "ipAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)"
          },
          "channel": {
            "$ref": "#/components/schemas/ChannelsBaseTypeEnum"
          },
          "source": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The source is a form free descriptor of the origin."
          },
          "payment": {
            "$ref": "#/components/schemas/OrderOpenPaymentRequest"
          },
          "deviceIdent": {
            "$ref": "#/components/schemas/DeviceIdentRequest"
          },
          "tracking": {
            "type": "array",
            "description": "specific parameter for all payment methods, array of object of type Tracking",
            "items": {
              "$ref": "#/components/schemas/Tracking"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaRequestWithThreeDsData"
          },
          "locale": {
            "type": "string",
            "description": "Language tag consisting of a two-letter language code combined with a two-letter country code according to RFC 1766. Examples: en-US, en-GB. Only for PayPal, Union Pay and WeChat Pay."
          },
          "risk": {
            "$ref": "#/components/schemas/Risk"
          }
        },
        "example": {
          "product": "creditcard",
          "merchantOrderId": "merchantOrderId_1629103141",
          "description": "description",
          "statementDescription": "statement description",
          "initialAmount": 100,
          "currency": "EUR",
          "payment": {
            "cardNumber": "4111111111111111",
            "verification": "111",
            "expiryMonth": "12",
            "expiryYear": "30",
            "cardHolder": "Max Mustermann"
          },
          "ipAddress": "192.168.0.1",
          "channel": "ECOM",
          "async": {
            "successUrl": "https://www.success-page.com",
            "failureUrl": "https://www.failure-page.com",
            "cancelUrl": "https://www.cancel-page.com"
          }
        }
      },
      "OrderOpenPaymentRequest": {
        "title": "OrderOpenPaymentRequest",
        "type": "object",
        "properties": {
          "paymentInstrumentId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "An ID of an already created paymentinstrument. Used to proceed the order. (optional)",
            "example": "paymentinstrument_123abcdef5"
          },
          "cardNumber": {
            "maxLength": 19,
            "minLength": 12,
            "type": "string",
            "description": "The Creditcard PAN used to proceed. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)"
          },
          "verification": {
            "maxLength": 4,
            "minLength": 3,
            "type": "string",
            "description": "The verification number of the creditcard. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)"
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The expiry month of the creditcard. Format: 01 -> january, 02 -> February, etc. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)"
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The expiry year of the creditcard. Format: 01 -> 2001, 02 -> 2002, etc. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)"
          },
          "cardHolder": {
            "maxLength": 128,
            "minLength": 3,
            "type": "string",
            "description": "The full name of the cardholder."
          },
          "bankName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the bank of the bank account.",
            "example": "Deutsche Bank"
          },
          "iban": {
            "maxLength": 34,
            "type": "string",
            "description": "IBAN of the bank account. (mandatory for sepa, optional if a sepa<br> paymentInstrumentId was passed)"
          },
          "bic": {
            "maxLength": 11,
            "minLength": 8,
            "type": "string",
            "description": "BIC of the bank account. (mandatory for sepa payments with a non german iban, optional if a sepa<br> paymentInstrumentId was passed<br> optional for ideal and sofort-collecting)",
            "example": "DE15111111111111111199"
          },
          "accountHolder": {
            "maxLength": 128,
            "minLength": 4,
            "type": "string",
            "description": "The account holders name of the bank account. (Optional parameter for PPRO payments methods<br> The maxLength value only for PPRO payment methods is 100.",
            "example": "Deutsche Bank"
          },
          "deferred": {
            "type": "boolean",
            "description": "Indicates if the order should be deferred. (only available for paypal preauth/execute, optional)"
          },
          "numberOfRates": {
            "type": "integer",
            "description": "Number of rates for ratepay installment"
          },
          "rate": {
            "type": "integer",
            "description": "Rate for ratepay installment"
          },
          "lastRate": {
            "type": "integer",
            "description": "Last rate for ratepay installment"
          },
          "interestRate": {
            "type": "number",
            "description": "Interest rate for ratepay installment"
          },
          "totalAmount": {
            "type": "integer",
            "description": "Total amount for ratepay installment"
          },
          "initializeCustomerTokenization": {
            "type": "boolean",
            "description": "Only for Klarna preauth or debit. True if we want to create token and next orders will be as recurring, false otherwise.<br> Organization customers can't use initializeCustomerTokenization."
          },
          "mandate": {
            "$ref": "#/components/schemas/MandateRequest"
          },
          "riskIdentId": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string",
            "description": "Only for RatePay preauth or debit."
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Mandatory parameter for Paysafecard Optional parameter for WeChat Pay, Union Pay and Sofort Collecting via PPRO debit.<br> The 2-letter ISO country code of the country in which the payment instrument is issued/operated (e.g. DE) Format [https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2]"
          },
          "compliantEmail": {
            "maxLength": 127,
            "type": "string",
            "description": "Optional parameter only for PayU via PPRO debit.<br> RFC compliant email address of the account holder."
          },
          "createRecurringBillingAgreement": {
            "type": "boolean",
            "description": "Only for paypal. Indicates if the payment is recurring."
          },
          "cofContract": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the COF contract of the payment instrument.<br>\nIn case more than one COF type should be used for one paymentInstrument this identifier should be stored by the merchant and referenced in the payment transactions.",
                "example": "contract_123abc456x"
              },
              "type": {
                "$ref": "#/components/schemas/CofContractTypeEnum"
              },
              "recurringExpiry": {
                "type": "string",
                "description": "Date after which no further authorizations shall be performed. This field is limited to 8 characters, and the",
                "format": "date"
              },
              "recurringFrequency": {
                "maximum": 9999,
                "minimum": 1,
                "type": "integer",
                "description": "Indicates the minimum number of days between authorizations. The field is limited to maximum 4 characters."
              }
            }
          },
          "displayLanguage": {
            "type": "string",
            "description": "Only for postfinance-card. This field is mandatory and contains the language of the shopper with possible values de, fr, it, en."
          },
          "displayMobileScreen": {
            "type": "boolean",
            "description": "Only for postfinance-card. This field is optional and it determines if it's used normal device with \"false\" value or smartphone with \"true\" as value. The default the value is \"false\"."
          }
        },
        "description": "Additional information Payment needed to proceed the order."
      },
      "OrdersPreauthPostBadRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "example": "v1/orders/preauth"
          },
          "timestamp": {
            "type": "number",
            "format": "date-time",
            "example": 1603275671582
          },
          "status": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Error while creating order!"
          },
          "code": {
            "type": "number",
            "example": 12000
          },
          "globalTrackId": {
            "type": "string",
            "example": "Some Request ID"
          },
          "errors": {
            "title": "Errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrdersPreauthPostErrors"
            }
          }
        }
      },
      "OrdersDebitPostBadRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "example": "v1/orders/debit"
          },
          "timestamp": {
            "type": "number",
            "format": "date-time",
            "example": 1603275671582
          },
          "status": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Error while creating order!"
          },
          "code": {
            "type": "number",
            "example": 12000
          },
          "globalTrackId": {
            "type": "string",
            "example": "Some Request ID"
          },
          "errors": {
            "title": "Errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrdersDebitPostErrors"
            }
          }
        }
      },
      "Async": {
        "title": "Async",
        "required": [
          "cancelUrl",
          "failureUrl",
          "successUrl"
        ],
        "type": "object",
        "properties": {
          "successUrl": {
            "maxLength": 1999,
            "minLength": 6,
            "type": "string",
            "description": "In case of a successful order the customer will be redirected to the given URL.",
            "format": "url"
          },
          "failureUrl": {
            "maxLength": 1999,
            "minLength": 6,
            "type": "string",
            "description": "In case of a failed order the customer will be redirected to the given URL.",
            "format": "url"
          },
          "cancelUrl": {
            "maxLength": 1999,
            "minLength": 6,
            "type": "string",
            "description": "In case of a cancellation by the customer, the customer will be redirected to the given URL.",
            "format": "url"
          },
          "confirmUrl": {
            "maxLength": 2048,
            "minLength": 6,
            "type": "string",
            "description": "Optional - used for PayPal Checkout - the customer will be redirected to the given URL to confirm the payment.",
            "format": "url"
          },
          "notifications": {
            "type": "array",
            "description": "Optional notification subscription requests. This enables receiving notification for this order's transactions.",
            "items": {
              "$ref": "#/components/schemas/NotificationSubscriptionRequest"
            }
          }
        },
        "description": "Async object for asynchronous payment methods like PayPal."
      },
      "InitialTransactionTypeBaseTypeEnum": {
        "title": "InitialTransactionTypeBaseTypeEnum",
        "type": "string",
        "description": "The type of the underlying Transaction",
        "enum": [
          "PREAUTH",
          "DEBIT"
        ]
      },
      "Item": {
        "title": "Item",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The articles name used in your shop."
          },
          "articleNumber": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The articles number used in your shop."
          },
          "totalPrice": {
            "maximum": 1000000000000000000,
            "minimum": -1000000000000000000,
            "type": "number",
            "description": "The total price for this item excluding taxes. The total amount should be given as smallest currency unit.",
            "format": "int"
          },
          "totalPriceWithTax": {
            "maximum": 1000000000000000000,
            "minimum": -1000000000000000000,
            "type": "number",
            "description": "The total price for this item including taxes. The total amount should be given as smallest currency unit. If the item is of type discount, the value must be negative: min -999999999999999998, max -1.",
            "format": "int"
          },
          "unitPrice": {
            "maximum": 1000000000000000000,
            "minimum": -1000000000000000000,
            "type": "number",
            "description": "The unit price for this item excluding taxes. The unit amount should be given as smallest currency unit.",
            "format": "int"
          },
          "unitPriceWithTax": {
            "maximum": 1000000000000000000,
            "minimum": -1000000000000000000,
            "type": "number",
            "description": "The unit price for this item including taxes. The unit amount should be given as smallest currency unit.",
            "format": "int"
          },
          "tax": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "The tax rate for the corresponding item. Will be returned in float format only if scale part contains no trailing zeros. 10.99 -> 10.99 10.90 -> 10.9 10.00 -> 10 10.0 -> 10 10 -> 10",
            "format": "float"
          },
          "quantity": {
            "minimum": 1,
            "type": "number",
            "description": "The quantity for this item.",
            "format": "int"
          },
          "discount": {
            "maximum": -1,
            "minimum": -1000000000000000000,
            "type": "number",
            "description": "item specific discount",
            "format": "int"
          },
          "articleType": {
            "$ref": "#/components/schemas/ArticleTypeEnum"
          }
        }
      },
      "ChannelsBaseTypeEnum": {
        "title": "ChannelsBaseTypeEnum",
        "type": "string",
        "description": "The channel determine the kind of origin for this order. (optional, mandatory for creditcard, ratepay-invoice, ratepay-directdebit and ratepay-installment)",
        "enum": [
          "MOTO",
          "ECOM"
        ]
      },
      "ProductsBaseTypeEnum": {
        "title": "ProductsBaseTypeEnum",
        "type": "string",
        "description": "The product used to create this order. (mandatory)",
        "enum": [
          "creditcard",
          "paypal",
          "paydirekt",
          "ratepay-invoice",
          "ratepay-directdebit",
          "ratepay-installment",
          "sepa",
          "sofort",
          "klarna-pay-now",
          "klarna-pay-later",
          "klarna-slice-it",
          "prepayment",
          "giropay",
          "eps",
          "ideal",
          "alipay",
          "bancontact",
          "wechat-pay",
          "postfinance-card",
          "payu",
          "paysafecard",
          "twint",
          "union-pay"
        ]
      },
      "Risk": {
        "type": "object",
        "properties": {
          "customerAccount": {
            "$ref": "#/components/schemas/RiskCustomerAccount"
          },
          "shippingInfo": {
            "$ref": "#/components/schemas/RiskShippingInfo"
          },
          "orderInfo": {
            "$ref": "#/components/schemas/RiskOrderInfo"
          }
        },
        "description": "An object containing information relevant for risk analysis on the issuere side."
      },
      "RiskCustomerAccount": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "The account identifier at the merchant side.",
            "example": "customer-abc123"
          },
          "creationDate": {
            "type": "string",
            "description": "The date when the customer opened the account with the merchant.",
            "format": "date",
            "example": "2019-07-10T00:00:00.000Z"
          },
          "lastChangeDate": {
            "type": "string",
            "description": "The date when the customer account with the merchant was last changed, including billing or shipping addres, new payment account or new user(s) added.",
            "format": "date",
            "example": "2019-07-10T00:00:00.000Z"
          },
          "changeIndicator": {
            "type": "string",
            "description": "Length of the time since the customer account information with the merchant was last changed, including billing or shipping addres, new payment account or new user(s) added.",
            "example": "CHANGED_WITH_THIS_TRANSACTION",
            "enum": [
              "CHANGED_WITH_THIS_TRANSACTION",
              "LESS_THAN_THIRTY_DAYS",
              "THIRTY_TO_SIXTY_DAYS",
              "MORE_THAN_SIXTY_DAYS"
            ]
          },
          "lastPasswordChangeDate": {
            "type": "string",
            "description": "The date when the customer account with the merchant had a password change or account reset.",
            "format": "date",
            "example": "2019-07-10T00:00:00.000Z"
          },
          "passwordChangeIndicator": {
            "type": "string",
            "description": "Length of the time since the customer account information with the merchant had a password change or account reset.",
            "example": "LESS_THAN_THIRTY_DAYS",
            "enum": [
              "NO_CHANGE",
              "CHANGED_WITH_THIS_TRANSACTION",
              "LESS_THAN_THIRTY_DAYS",
              "THIRTY_TO_SIXTY_DAYS",
              "MORE_THAN_SIXTY_DAYS"
            ]
          },
          "authenticationMethod": {
            "type": "string",
            "description": "Mechanism used by the customer to authenticate to the merchant account.",
            "example": "OWN_CREDENTIALS",
            "enum": [
              "GUEST",
              "OWN_CREDENTIALS",
              "FEDERATED_ID",
              "ISSUER_CREDENTIALS",
              "THIRD_PARTY_AUTH",
              "FIDO_AUTHENTICATOR"
            ]
          },
          "authenticationTimestamp": {
            "type": "string",
            "description": "Date and time in UTC of the customer authentication to the merchant account.",
            "format": "date-time",
            "example": "2019-07-10T15:04:09.722Z"
          },
          "shippingAddressUsageIndicator": {
            "type": "string",
            "description": "Indicates when the shipping address used for this transaction was first used with the merchant account.",
            "example": "LESS_THAN_THIRTY_DAYS",
            "enum": [
              "FIRST_TIME",
              "LESS_THAN_THIRTY_DAYS",
              "THIRTY_TO_SIXTY_DAYS",
              "MORE_THAN_SIXTY_DAYS"
            ]
          },
          "shippingAddressFirstUsage": {
            "type": "string",
            "description": "Date when the shipping address used for this transaction was first used with the merchant.",
            "format": "date",
            "example": "2019-07-10T00:00:00.000Z"
          },
          "transactionCountLastDay": {
            "type": "number",
            "description": "Number of transactions (successful and abandoned) for this customer account with the merchant across all payment accounts in the previous 24 hours.",
            "example": 1
          },
          "transactionCountLastYear": {
            "type": "number",
            "description": "Number of transactions (successful and abandoned) for this customer account with the merchant across all payment accounts in the previous year.",
            "example": 10
          },
          "orderCountLast6Months": {
            "type": "number",
            "description": "Number of purchases with this cardholder account during the previous six months.",
            "example": 5
          },
          "suspiciousActivity": {
            "type": "boolean",
            "description": "Indicates whether the merchant has experienced suspicious activity (including previous fraud) on the customer account.",
            "example": false
          },
          "accountEqualsShippingName": {
            "type": "boolean",
            "description": "Indicates if the customer name on the account is identical to the shipping name used for this transaction.",
            "example": true
          },
          "paymentAccountAgeIndicator": {
            "type": "string",
            "description": "Indicates the length of time that the payment account was enrolled in the customer account with the merchant.",
            "enum": [
              "NO_ACCOUNT",
              "CREATED_WITH_THIS_TRANSACTION",
              "LESS_THAN_THIRTY_DAYS",
              "THIRTY_TO_SIXTY_DAYS",
              "MORE_THAN_SIXTY_DAYS"
            ]
          },
          "paymentAccountEnrollementDate": {
            "type": "string",
            "description": "Date that the payment account was enrolled in the customer account with the merchant.",
            "format": "date",
            "example": "2019-07-10T00:00:00.000Z"
          }
        },
        "description": "An object containing information about the customer account with the merchant."
      },
      "RiskShippingInfo": {
        "type": "object",
        "properties": {
          "shippingEqualsBillingAddress": {
            "type": "boolean",
            "description": "Flag if the shipping address equals the billing address.",
            "example": true
          },
          "shippingIndicator": {
            "type": "string",
            "description": "Indicates the shipping method chosen for the transaction. Merchants must choose the shipping indicator that most accurately describes the customer's specific transaction. If one or more items are included in the sale, use the shipping indicator for the physical goods, or if all digital goods, use the indicator that describes the most expensive item.",
            "example": "SHIP_TO_BILLING_ADDRESS",
            "enum": [
              "SHIP_TO_BILLING_ADDRESS",
              "SHIP_TO_VERIFIED_ADDRESS",
              "SHIP_TO_DIFFERENT_ADDRESS",
              "SHIP_TO_STORE",
              "DIGITAL_GOODS",
              "TICKETS_NOT_SHIPPED",
              "OTHER"
            ]
          },
          "deliveryTime": {
            "type": "string",
            "description": "Indicates the merchandise delivery timeframe.",
            "example": "SAME_DAY",
            "enum": [
              "ELECTRONIC",
              "SAME_DAY",
              "OVERNIGHT",
              "TWO_DAY_OR_MORE"
            ]
          },
          "deliveryEmail": {
            "type": "string",
            "description": "For electronic delivery, the email address to which the merchandise was delivered.",
            "example": "john@doe.com"
          }
        },
        "description": "object containing information about the shipping details for this transaction."
      },
      "RiskOrderInfo": {
        "type": "object",
        "properties": {
          "isReorder": {
            "type": "boolean",
            "description": "Indicates whether the cardholder is reordering previously purchased merchandise.",
            "example": false
          },
          "preOrderIndicator": {
            "type": "string",
            "description": "Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.",
            "example": "MERCHANTDISE_AVAILABLE",
            "enum": [
              "MERCHANTDISE_AVAILABLE",
              "FUTURE_AVAILABILITY"
            ]
          },
          "preOrderDate": {
            "type": "string",
            "description": "For a pre-ordered purchase, the expected date that the merchandise will be available.",
            "format": "date",
            "example": "2019-07-10T00:00:00.000Z"
          },
          "orderType": {
            "type": "string",
            "description": "Identifies the type of transaction being authenticated. The values are derived from ISO 8583.<br> If this value is not provided, a default value of 01 is used.<br>\nAccepted values are: <br>01 -> Goods / Service purchase <br>03 -> Check Acceptance <br>10 -> Account Funding <br>11 -> Quasi-Cash Transaction <br>28 -> Prepaid activation and Loan",
            "example": "01",
            "enum": [
              "01",
              "03",
              "10",
              "11",
              "28"
            ]
          }
        },
        "description": "object containing order information relevant for risk evaluation"
      },
      "TransactionResponseChildren": {
        "title": "TransactionResponseChildren",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "transactionId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the transaction. Created by payengine"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatesBaseTypeEnum"
          },
          "initialAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The initial amount given to create this transaction.",
            "format": "int"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217"
          },
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The description from your system/shop of this transaction."
          },
          "createdAt": {
            "type": "number",
            "description": "This timestamp indicates the creation of this transaction.",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "number",
            "description": "This timestamp indicates the last modification of this transaction.",
            "format": "date-time"
          },
          "order": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the connected order."
          },
          "transactions": {
            "type": "array",
            "description": "A list of underlying transactions.",
            "items": {
              "type": "string"
            }
          },
          "parentTransaction": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the parent transaction."
          },
          "descriptor": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "Identifier which holds the orderId"
          },
          "capturedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been captured.",
            "format": "int"
          },
          "refundedAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been refunded.",
            "format": "int"
          },
          "canceledAmount": {
            "maximum": 1000000000000000000,
            "minimum": 1,
            "type": "number",
            "description": "The amount which has been cancelled.",
            "format": "int"
          },
          "challenge": {
            "$ref": "#/components/schemas/Challenge"
          },
          "tracking": {
            "type": "array",
            "description": "specific parameter for all payment methods, array of object of type Tracking",
            "items": {
              "$ref": "#/components/schemas/Tracking"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/TransactionMeta"
          }
        }
      },
      "OrderStatesBaseTypeEnum": {
        "title": "OrderStatesBaseTypeEnum",
        "type": "string",
        "description": "The current status of the order\nIt can be one of the following\nCREATED, OPEN, CLOSED\nA order remains open until the initial amount has been refunded or cancelled.\n",
        "enum": [
          "CREATED",
          "OPEN",
          "CLOSED"
        ]
      },
      "CustomerResponse": {
        "title": "CustomerResponse",
        "type": "object",
        "properties": {
          "customerId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the customer. Created by payengine"
          },
          "email": {
            "type": "string",
            "description": "The customers email address. unique.",
            "format": "email"
          },
          "merchantCustomerId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the customer. Created by you."
          },
          "addresses": {
            "type": "array",
            "description": "A list of all underlying addresses which are connected to the customer.",
            "items": {
              "$ref": "#/components/schemas/AddressResponse"
            }
          },
          "personas": {
            "type": "array",
            "description": "A list of all underlying personas which are connected to the customer.",
            "items": {
              "$ref": "#/components/schemas/PersonaResponse"
            }
          },
          "paymentInstruments": {
            "type": "array",
            "description": "A list of all underlying paymentinstruments which are connected to the customer.",
            "items": {
              "$ref": "#/components/schemas/PaymentInstrumentResponse"
            }
          }
        }
      },
      "AddressResponse": {
        "title": "AddressResponse",
        "type": "object",
        "properties": {
          "addressId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the address. Created by payengine"
          },
          "createdAt": {
            "type": "number",
            "description": "This timestamp indicates the creation of this address.",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "number",
            "description": "This timestamp indicates the last modification of this address.",
            "format": "date-time"
          },
          "firstName": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The firstname of this address. limited to 35 characters!"
          },
          "lastName": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The lastname of this address. limited to 35 characters!"
          },
          "street": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string",
            "description": "The street of this address."
          },
          "houseNumber": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The housenumber of the street."
          },
          "city": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The city of the address."
          },
          "zip": {
            "maxLength": 10,
            "minLength": 3,
            "type": "string",
            "description": "The zip of the address."
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The country of the address. Format [https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2]"
          },
          "state": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The state of the address."
          },
          "phone": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "The phone of the address. limited to 16 characters!"
          },
          "fax": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "The fax of the address. limited to 16 characters!"
          },
          "mobile": {
            "type": "string",
            "description": "The mobile of the address. limited to 16 characters!"
          },
          "title": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The title of the address."
          },
          "additionalDetails": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Additional details for this address. This is a form free descriptor."
          }
        }
      },
      "PersonaResponse": {
        "title": "PersonaResponse",
        "type": "object",
        "properties": {
          "personaId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the persona. Created by payengine"
          },
          "createdAt": {
            "type": "number",
            "description": "This timestamp indicates the creation of this persona.",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "number",
            "description": "This timestamp indicates the last modification of this persona.",
            "format": "date-time"
          },
          "firstName": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The firstname of this persona. limited to 35 characters!"
          },
          "lastName": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The lastname of this persona. limited to 35 characters!"
          },
          "phone": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "The phone of the persona. limited to 16 characters!"
          },
          "mobile": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "The mobile of the persona. limited to 16 characters!"
          },
          "fax": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "The fax of the persona. limited to 16 characters!"
          },
          "birthday": {
            "type": "number",
            "description": "The birthday of the persona. Format as milliseconds since epoch representing UTC Date.",
            "format": "date-time"
          },
          "gender": {
            "$ref": "#/components/schemas/GenderBaseTypeEnum"
          },
          "title": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The title of the persona."
          }
        }
      },
      "GenderBaseTypeEnum": {
        "title": "GenderBaseTypeEnum",
        "type": "string",
        "description": "The gender of the persona.",
        "enum": [
          "MALE",
          "FEMALE"
        ]
      },
      "PaymentInstrumentResponse": {
        "title": "PaymentInstrumentResponse",
        "type": "object",
        "properties": {
          "paymentInstrumentId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the paymentinstrument. Created by payengine"
          },
          "merchantPaymentInstrumentId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the paymentinstrument on your system. Created by you. limited to 100 characters."
          },
          "origin": {
            "$ref": "#/components/schemas/ProductsBaseTypeEnum"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentInstrumentType"
          },
          "recurring": {
            "type": "boolean",
            "description": "This flag indicates if this paymentinstrument can be used for recurring payments."
          },
          "createdAt": {
            "type": "integer",
            "description": "Timestamp when it was created"
          },
          "modifiedAt": {
            "type": "integer",
            "description": "Timestamp when it was last updated"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "cofContracts": {
                "type": "array",
                "description": "For CreditCard only",
                "items": {
                  "$ref": "#/components/schemas/CofContractResponse"
                }
              },
              "customerRelationUuid": {
                "type": "string",
                "description": "For TWINT only. Recognition of a returning customer."
              }
            },
            "description": "Additional attributes of this paymentinstrument. E.g. masked bank- or creditcarddata.<br> For Klarna we will have possibleTypes object in the response (e.g. klarna-pay-now, klarna-pay-later, klarna-slice-it)<br> Also we will have country, and locale.<br> For PPRO payments methods we could have accountHolder (if one was used for making the transaction)"
          }
        },
        "description": "The paymentinstrument which has been used to process this order. note: If no paymentinstrument has been submitted, one has been created with your submitted data."
      },
      "DeviceIdentRequest": {
        "title": "DeviceIdentRequest",
        "type": "object",
        "properties": {
          "deviceIdentToken": {
            "maxLength": 128,
            "type": "string"
          }
        }
      },
      "DeviceIdentResponse": {
        "title": "DeviceIdentResponse",
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "fraudscore": {
            "type": "number"
          },
          "fraudscoreRaw": {
            "type": "number"
          },
          "ruleScores": {
            "type": "string"
          },
          "fraudscoreRulematches": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "regioncode": {
            "type": "string"
          },
          "continent": {
            "type": "string"
          },
          "countryname": {
            "type": "string"
          },
          "regionname": {
            "type": "string"
          },
          "countrycode": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "exactidCreated": {
            "type": "string"
          },
          "smartidCreated": {
            "type": "string"
          },
          "exactid": {
            "type": "string"
          },
          "confidencelevel": {
            "type": "number"
          },
          "smartid": {
            "type": "string"
          },
          "confidencelevelhistory": {
            "type": "number"
          },
          "verifiedOs": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "languages": {
            "type": "string"
          }
        }
      },
      "OrderMetaInfResponse": {
        "title": "OrderMetaInfResponse",
        "type": "object",
        "properties": {
          "deferred": {
            "type": "boolean",
            "description": "Indicates if the order is marked as deferred. Available only for paypal."
          },
          "emailSubject": {
            "type": "string",
            "description": "Available only for paypal. The subject line of the email that PayPal sends when the transaction is completed."
          },
          "receiverType": {
            "type": "string",
            "description": "Available only for paypal. Indicates how you identify the recipients of payments in this call to MassPay."
          },
          "receiverEmail": {
            "type": "string",
            "description": "Available only for paypal. Email address of recipient."
          },
          "receiverPhone": {
            "type": "string",
            "description": "Available only for paypal. Mobile phone number of recipient."
          },
          "receiverId": {
            "type": "string",
            "description": "Available only for paypal. Unique PayPal customer account number."
          },
          "preferredLanguage": {
            "type": "string",
            "description": "Available only for RatePay, iDEAL, Alipay, Bancontact, Union Pay and WeChat Pay."
          },
          "mobileView": {
            "type": "boolean",
            "description": "Available only for Alipay."
          },
          "qrCode": {
            "type": "string",
            "description": "Available only for TWINT. Image of the pairing token as a QR code (PNG image in base-64 encoding)."
          },
          "token": {
            "type": "string",
            "description": "Available only for TWINT. Numeric token to establish the pairing between the customer and cash register."
          },
          "cofContract": {
            "$ref": "#/components/schemas/CofContractResponse"
          },
          "externalCofData": {
            "$ref": "#/components/schemas/ExternalCofData"
          },
          "schemeTraceId": {
            "type": "string",
            "description": "Scheme Trace ID or transaction reference returned by the card scheme for each authorization. This value can be used in subsequent MIT payments if the credential on file handling is not done by the Payengine but externally. See 'externalCofData.initialSchemeTraceId' description.",
            "example": "123456789012345"
          },
          "threeDsData": {
            "type": "object",
            "properties": {
              "authenticationResult": {
                "$ref": "#/components/schemas/AuthenticationResult"
              }
            }
          },
          "edccData": {
            "type": "object",
            "properties": {
              "edccId": {
                "type": "string",
                "description": "The ID of the eDCC offer to be used for currency conversion",
                "example": "Edcc-cbc6ffd8-6417-49ee-92c1-121fe1e19b20"
              },
              "foreignAmount": {
                "type": "number",
                "description": "The foreign amount, to which the baseAmount is converted\n",
                "format": "int",
                "example": 13920
              },
              "marginPercentage": {
                "type": "number",
                "format": "int",
                "example": 3
              },
              "rate": {
                "type": "number",
                "description": "The conversion rate used to convert the baseAmount to the foreignCurrency",
                "format": "float",
                "example": 1.1276
              },
              "baseCurrency": {
                "type": "string",
                "description": "The string currency code of the base currency",
                "example": "EUR"
              },
              "foreignCurrency": {
                "type": "string",
                "description": "The string currency code of the foreign currency",
                "example": "USD"
              }
            },
            "description": "Details about the eDCC offer used in the order"
          },
          "instant": {
            "type": "boolean",
            "description": "Indicator if the credit should be instant e.g. visa oct"
          }
        }
      },
      "OrdersGetErrors": {
        "type": "array",
        "example": [
          {
            "code": 12101,
            "field": "orderId",
            "message": "An Order with specified id can not be found. Expected: A valid string identifier representing an Order object between 1 and 255 characters."
          }
        ],
        "items": {
          "$ref": "#/components/schemas/Error"
        }
      },
      "Tracking": {
        "title": "Tracking",
        "type": "object",
        "properties": {
          "trackingId": {
            "maxLength": 50,
            "type": "string"
          },
          "provider": {
            "type": "string",
            "enum": [
              "DPD",
              "GLS",
              "DHL",
              "HLG",
              "HVS",
              "UPS",
              "TNT",
              "OTH"
            ]
          }
        }
      },
      "MetaRequestWithThreeDsData": {
        "title": "MetaRequest",
        "type": "object",
        "properties": {
          "externalCofData": {
            "$ref": "#/components/schemas/ExternalCofData"
          },
          "invoicing": {
            "$ref": "#/components/schemas/Invoicing"
          },
          "preferredLanguage": {
            "maxLength": 2,
            "type": "string",
            "description": "Works with RatePay, iDEAL, Alipay, Bancontact, Union Pay and WeChat Pay. Two-letter language code, lower case."
          },
          "referenceId": {
            "maxLength": 255,
            "type": "string",
            "description": "RatePAY specific parameter."
          },
          "addressOverride": {
            "type": "boolean",
            "description": "Paypal specific parameter. If false the shipping address passed with the request will be editable on the paypal site. Default value is true."
          },
          "fraudNetId": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "Paypal specific parameter. Verifies that the payment originates from a valid, user-consented device and application."
          },
          "tan": {
            "type": "string",
            "description": "Second factor for online bank transfer based refunds"
          },
          "mobileView": {
            "type": "boolean",
            "description": "Set to true for the mobile enabled variant of Alipay."
          },
          "threeDsData": {
            "$ref": "#/components/schemas/ThreeDsMetaRequest"
          },
          "terminalId": {
            "type": "string",
            "description": "The terminalId of the POS terminal, mandatory for POS creditcard orders.",
            "example": "69038411"
          },
          "printerReady": {
            "type": "boolean",
            "description": "Indicates if the receipt printer is ready to use, mandatory for POS creditcard orders.",
            "example": true
          },
          "edccId": {
            "type": "string",
            "description": "The ID of the eDCC offer to be used for currency conversion. Applicable only for credit card orders",
            "example": "Edcc-cbc6ffd8-6417-49ee-92c1-121fe1e19b20"
          }
        },
        "description": "Contains specific information for different payment methods."
      },
      "OrdersPreauthPostErrors": {
        "type": "array",
        "example": [
          {
            "code": 12200,
            "field": "initialAmount",
            "message": "Field initialAmount is missing.  Expected: Positive integer between 1 and 999999999999999999."
          },
          {
            "code": 12201,
            "field": "initialAmount",
            "message": "Bad value for initialAmount. Expected: Positive integer between 1 and 999999999999999999."
          },
          {
            "code": 12202,
            "field": "currency",
            "message": "Field currency is missing. Expected: string value in ['EUR']."
          },
          {
            "code": 12203,
            "field": "currency",
            "message": "Bad value for currency. Expected: string value in ['EUR']."
          },
          {
            "code": 12204,
            "field": "async",
            "message": "Field async is missing. Expected: object of type Async."
          },
          {
            "code": 12205,
            "field": "async.successUrl",
            "message": "Field async.successUrl is missing. Expected: string representing a valid URL."
          },
          {
            "code": 12206,
            "field": "async.successUrl",
            "message": "Bad value for async.successUrl. Expected: string representing a valid URL."
          },
          {
            "code": 12207,
            "field": "async.failureUrl",
            "message": "Field async.failureUrl is missing. Expected: string representing a valid URL."
          },
          {
            "code": 12208,
            "field": "async.failureUrl",
            "message": "Bad value for async.failureUrl. Expected: string representing a valid URL."
          },
          {
            "code": 12209,
            "field": "async.cancelUrl",
            "message": "Field async.cancelUrl is missing. Expected: string representing a valid URL."
          },
          {
            "code": 12210,
            "field": "async.cancelUrl",
            "message": "Bad value for async.cancelUrl. Expected: string representing a valid URL."
          },
          {
            "code": 12211,
            "field": "async.transactionType",
            "message": "Field async.transactionType is missing. Expected: string value in ['PREAUTH', 'DEBIT']."
          },
          {
            "code": 12212,
            "field": "async.transactionType",
            "message": "Bad value for async.transactionType. Expected: string value in ['PREAUTH', 'DEBIT']."
          },
          {
            "code": 12213,
            "field": "terms",
            "message": "Field terms is missing. Expected: UNIX timestamp in ms."
          },
          {
            "code": 12214,
            "field": "terms",
            "message": "Bad value for terms. Expected: UNIX timestamp in ms."
          },
          {
            "code": 12215,
            "field": "privacy",
            "message": "Field privacy is missing. Expected: UNIX timestamp in ms."
          },
          {
            "code": 12216,
            "field": "privacy",
            "message": "Bad value for privacy. Expected: UNIX timestamp in ms."
          },
          {
            "code": 12217,
            "field": "description",
            "message": "Bad value for description. Expected: string of length between 1 and 128."
          },
          {
            "code": 12218,
            "field": "statementDescription",
            "message": "Bad value for statementDescription. Expected: string of length between 1 and 128."
          },
          {
            "code": 12219,
            "field": "basket",
            "message": "Field basket is missing. Expected: array of type Item."
          },
          {
            "code": 12220,
            "field": "basket",
            "message": "Bad value for basket. Expected: array of type Item."
          },
          {
            "code": 12221,
            "field": "basket.item.name",
            "message": "Field basket.item.name is missing. Expected: string of length between 1 and 128."
          },
          {
            "code": 12222,
            "field": "basket.item.name",
            "message": "Bad value for basket.item.name. Expected: string of length between 1 and 128."
          },
          {
            "code": 12223,
            "field": "basket.item.articleNumber",
            "message": "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
          },
          {
            "code": 12224,
            "field": "basket.item.articleNumber",
            "message": "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
          },
          {
            "code": 12225,
            "field": "basket.item.totalPrice",
            "message": "Field basket.item.totalPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12226,
            "field": "basket.item.totalPrice",
            "message": "Bad value for basket.item.totalPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12227,
            "field": "basket.item.totalPriceWithTax",
            "message": "Field basket.item.totalPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12228,
            "field": "basket.item.totalPriceWithTax",
            "message": "Bad value for basket.item.totalPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12229,
            "field": "basket.item.tax",
            "message": "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
          },
          {
            "code": 12230,
            "field": "basket.item.tax",
            "message": "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
          },
          {
            "code": 12231,
            "field": "basket.item.unitPrice",
            "message": "Field basket.item.unitPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12232,
            "field": "basket.item.unitPrice",
            "message": "Bad value for basket.item.unitPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12233,
            "field": "basket.item.unitPriceWithTax",
            "message": "Field basket.item.unitPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12234,
            "field": "basket.item.unitPriceWithTax",
            "message": "Bad value for basket.item.unitPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12235,
            "field": "basket.item.quantity",
            "message": "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
          },
          {
            "code": 12236,
            "field": "basket.item.quantity",
            "message": "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
          },
          {
            "code": 12237,
            "field": "customer",
            "message": "Field customer is missing. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
          },
          {
            "code": 12238,
            "field": "customer",
            "message": "Bad value for customer. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
          },
          {
            "code": 12239,
            "field": "customer",
            "message": "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
          },
          {
            "code": 12240,
            "field": "persona",
            "message": "Field persona is missing. Expected: A valid string identifier between 1 and 255 characters representing a Persona object."
          },
          {
            "code": 12241,
            "field": "persona",
            "message": "Bad value for persona. xpected: A valid string identifier between 1 and 255 characters representing a Persona object."
          },
          {
            "code": 12242,
            "field": "persona",
            "message": "Referenced object for persona invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.birthday filled out."
          },
          {
            "code": 12243,
            "field": "persona",
            "message": "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.phone, persona.mobile filled out."
          },
          {
            "code": 12244,
            "field": "billingAddress",
            "message": "Field billingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
          },
          {
            "code": 12245,
            "field": "billingAddress",
            "message": "Bad value for billingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
          },
          {
            "code": 12246,
            "field": "shippingAddress",
            "message": "Field shippingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
          },
          {
            "code": 12247,
            "field": "shippingAddress",
            "message": "Bad value for shippingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
          },
          {
            "code": 12248,
            "field": "ipAddress",
            "message": "Field ipAddress is missing. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
          },
          {
            "code": 12249,
            "field": "ipAddress",
            "message": "Bad value for ipAddress. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
          },
          {
            "code": 12250,
            "field": "channel",
            "message": "Field channel is missing. Expected: A string value in ['MOTO', 'ECOM']."
          },
          {
            "code": 12251,
            "field": "channel",
            "message": "Bad value for channel.  Expected: A string value in ['MOTO', 'ECOM']."
          },
          {
            "code": 12252,
            "field": "source",
            "message": "Bad value for source.  Expected: string of length between 1 and 128 characters."
          },
          {
            "code": 10201,
            "field": "type",
            "message": "Field type is missing. Expected: string value in ['sepa', 'creditcard', 'klarna', 'paypal']."
          },
          {
            "code": 10202,
            "field": "type",
            "message": "Bad value for type. string value in ['sepa', 'creditcard', 'klarna', 'paypal']."
          },
          {
            "code": 12255,
            "field": "payment",
            "message": "Field payment is missing. Expected: A valid object of type PaymentInstrumentPayment."
          },
          {
            "code": 12998,
            "field": "payment.riskIdentId",
            "message": "Bad value for payment.riskIdentId. Expected: A string object of length between 1 and 255."
          },
          {
            "code": 129999,
            "field": "payment.{unexpected_field}",
            "message": "Bad value for payment.{unexpected_field} is unknown. Expected: A valid object of type PaymentInstrumentPayment."
          },
          {
            "code": 16000,
            "field": "payment.cardNumber",
            "message": "Field payment.cardNumber is missing. Expected: string of length between 12 and 19 representing a valid creditcard number."
          },
          {
            "code": 16001,
            "field": "payment.cardNumber",
            "message": "Bad value for payment.cardNumber. Expected: string of length between 12 and 19 representing a valid creditcard number."
          },
          {
            "code": 16002,
            "field": "payment.verification",
            "message": "Field payment.verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
          },
          {
            "code": 16003,
            "field": "payment.verification",
            "message": "Bad value for payment.verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
          },
          {
            "code": 16004,
            "field": "payment.expiryMonth",
            "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
          },
          {
            "code": 16005,
            "field": "payment.expiryMonth",
            "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
          },
          {
            "code": 16006,
            "field": "payment.expiryYear",
            "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
          },
          {
            "code": 16007,
            "field": "payment.expiryYear",
            "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
          },
          {
            "code": 16008,
            "field": "payment.expiryMonth & payment.expiryYear",
            "message": "Bad value for combination of payment.expiryMonth and payment.exiryYear. Expected: payment.expiryMonth and payment.expiryYear combined should represent a valid credit card expiry date."
          },
          {
            "code": 16009,
            "field": "payment.cardHolder",
            "message": "Field payment.cardHolder is missing. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
          },
          {
            "code": 16010,
            "field": "payment.cardHolder",
            "message": "Bad value for payment.cardHolder. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
          },
          {
            "code": 16011,
            "field": "payment.bankName",
            "message": "Bad value for payment.bankName. Expected: string of length between 1 and 255 containing only alpha, whitespaces, numeric characters."
          },
          {
            "code": 16012,
            "field": "payment.iban",
            "message": "Field payment.iban is missing. Expected: string representing a valid IBAN from Belgium, Germany, Estonia, Finland, France, Greece, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, the Netherlands, Austria, Portugal, Slovakia, Slovenia, Spain, Switzerland or Cyprus."
          },
          {
            "code": 16013,
            "field": "payment.iban",
            "message": "Bad value for payment.iban. Expected: string representing a valid IBAN from Belgium, Germany, Estonia, Finland, France, Greece, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, the Netherlands, Austria, Portugal, Slovakia, Slovenia, Spain, Switzerland or Cyprus."
          },
          {
            "code": 16014,
            "field": "payment.bic",
            "message": "Field payment.bic is missing. Expected: string of length 8 or 11 representing a valid BIC representing a valid german BIC."
          },
          {
            "code": 16015,
            "field": "payment.bic",
            "message": "Bad value for payment.bic. Expected: sstring of length 8 or 11 representing a valid german BIC."
          },
          {
            "code": 16016,
            "field": "payment.accountHolder",
            "message": "Bad value for payment.accountHolder. Expected: string of length between 4 and 128."
          },
          {
            "code": 60013,
            "field": "payment.displayLanguage",
            "message": "Field payment.displayLanguage is missing. Expected: Valid ISO-639-1 country code."
          },
          {
            "code": 60014,
            "field": "payment.displayLanguage",
            "message": "Bad value for payment.displayLanguage. Expected: Valid ISO-639-1 country code. It should be one of 'de', 'en', 'fr' or 'it'."
          },
          {
            "code": 60015,
            "field": "payment.displayMobileScreen",
            "message": "Bad value for payment.displayMobileScreen.  Expected: 'true' or 'false'."
          }
        ],
        "items": {
          "$ref": "#/components/schemas/Error"
        }
      },
      "OrdersDebitPostErrors": {
        "type": "array",
        "example": [
          {
            "code": 12200,
            "field": "initialAmount",
            "message": "Field initialAmount is missing.  Expected: Positive integer between 1 and 999999999999999999."
          },
          {
            "code": 12201,
            "field": "initialAmount",
            "message": "Bad value for initialAmount. Expected: Positive integer between 1 and 999999999999999999."
          },
          {
            "code": 12202,
            "field": "currency",
            "message": "Field currency is missing. Expected: string value in ['EUR']."
          },
          {
            "code": 12203,
            "field": "currency",
            "message": "Bad value for currency. Expected: string value in ['EUR']."
          },
          {
            "code": 12204,
            "field": "async",
            "message": "Field async is missing. Expected: object of type Async."
          },
          {
            "code": 12205,
            "field": "async.successUrl",
            "message": "Field async.successUrl is missing. Expected: string representing a valid URL."
          },
          {
            "code": 12206,
            "field": "async.successUrl",
            "message": "Bad value for async.successUrl. Expected: string representing a valid URL."
          },
          {
            "code": 12207,
            "field": "async.failureUrl",
            "message": "Field async.failureUrl is missing. Expected: string representing a valid URL."
          },
          {
            "code": 12208,
            "field": "async.failureUrl",
            "message": "Bad value for async.failureUrl. Expected: string representing a valid URL."
          },
          {
            "code": 12209,
            "field": "async.cancelUrl",
            "message": "Field async.cancelUrl is missing. Expected: string representing a valid URL."
          },
          {
            "code": 12210,
            "field": "async.cancelUrl",
            "message": "Bad value for async.cancelUrl. Expected: string representing a valid URL."
          },
          {
            "code": 12211,
            "field": "async.transactionType",
            "message": "Field async.transactionType is missing. Expected: string value in ['PREAUTH', 'DEBIT']."
          },
          {
            "code": 12212,
            "field": "async.transactionType",
            "message": "Bad value for async.transactionType. Expected: string value in ['PREAUTH', 'DEBIT']."
          },
          {
            "code": 12213,
            "field": "terms",
            "message": "Field terms is missing. Expected: UNIX timestamp in ms."
          },
          {
            "code": 12214,
            "field": "terms",
            "message": "Bad value for terms. Expected: UNIX timestamp in ms."
          },
          {
            "code": 12215,
            "field": "privacy",
            "message": "Field privacy is missing. Expected: UNIX timestamp in ms."
          },
          {
            "code": 12216,
            "field": "privacy",
            "message": "Bad value for privacy. Expected: UNIX timestamp in ms."
          },
          {
            "code": 12217,
            "field": "description",
            "message": "Bad value for description. Expected: string of length between 1 and 128."
          },
          {
            "code": 12218,
            "field": "statementDescription",
            "message": "Bad value for statementDescription. Expected: string of length between 1 and 128."
          },
          {
            "code": 12219,
            "field": "basket",
            "message": "Field basket is missing. Expected: array of type Item."
          },
          {
            "code": 12220,
            "field": "basket",
            "message": "Bad value for basket. Expected: array of type Item."
          },
          {
            "code": 12221,
            "field": "basket.item.name",
            "message": "Field basket.item.name is missing. Expected: string of length between 1 and 128."
          },
          {
            "code": 12222,
            "field": "basket.item.name",
            "message": "Bad value for basket.item.name. Expected: string of length between 1 and 128."
          },
          {
            "code": 12223,
            "field": "basket.item.articleNumber",
            "message": "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
          },
          {
            "code": 12224,
            "field": "basket.item.articleNumber",
            "message": "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
          },
          {
            "code": 12225,
            "field": "basket.item.totalPrice",
            "message": "Field basket.item.totalPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12226,
            "field": "basket.item.totalPrice",
            "message": "Bad value for basket.item.totalPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12227,
            "field": "basket.item.totalPriceWithTax",
            "message": "Field basket.item.totalPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12228,
            "field": "basket.item.totalPriceWithTax",
            "message": "Bad value for basket.item.totalPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12229,
            "field": "basket.item.tax",
            "message": "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
          },
          {
            "code": 12230,
            "field": "basket.item.tax",
            "message": "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
          },
          {
            "code": 12231,
            "field": "basket.item.unitPrice",
            "message": "Field basket.item.unitPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12232,
            "field": "basket.item.unitPrice",
            "message": "Bad value for basket.item.unitPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12233,
            "field": "basket.item.unitPriceWithTax",
            "message": "Field basket.item.unitPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
          },
          {
            "code": 12234,
            "field": "basket.item.unitPriceWithTax",
            "message": "Bad value for basket.item.unitPriceWithTax. Expected: positive integer between 1 and 999999999999999999."
          },
          {
            "code": 12235,
            "field": "basket.item.quantity",
            "message": "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
          },
          {
            "code": 12236,
            "field": "basket.item.quantity",
            "message": "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
          },
          {
            "code": 12237,
            "field": "customer",
            "message": "Field customer is missing. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
          },
          {
            "code": 12238,
            "field": "customer",
            "message": "Bad value for customer. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
          },
          {
            "code": 12239,
            "field": "customer",
            "message": "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
          },
          {
            "code": 12240,
            "field": "persona",
            "message": "Field persona is missing. Expected: A valid string identifier between 1 and 255 characters representing a Persona object."
          },
          {
            "code": 12241,
            "field": "persona",
            "message": "Bad value for persona. xpected: A valid string identifier between 1 and 255 characters representing a Persona object."
          },
          {
            "code": 12242,
            "field": "persona",
            "message": "Referenced object for persona invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.birthday filled out."
          },
          {
            "code": 12243,
            "field": "persona",
            "message": "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.phone, persona.mobile filled out."
          },
          {
            "code": 12244,
            "field": "billingAddress",
            "message": "Field billingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
          },
          {
            "code": 12245,
            "field": "billingAddress",
            "message": "Bad value for billingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
          },
          {
            "code": 12246,
            "field": "shippingAddress",
            "message": "Field shippingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
          },
          {
            "code": 12247,
            "field": "shippingAddress",
            "message": "Bad value for shippingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
          },
          {
            "code": 12248,
            "field": "ipAddress",
            "message": "Field ipAddress is missing. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
          },
          {
            "code": 12249,
            "field": "ipAddress",
            "message": "Bad value for ipAddress. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
          },
          {
            "code": 12250,
            "field": "channel",
            "message": "Field channel is missing. Expected: A string value in ['MOTO', 'ECOM']."
          },
          {
            "code": 12251,
            "field": "channel",
            "message": "Bad value for channel.  Expected: A string value in ['MOTO', 'ECOM']."
          },
          {
            "code": 12252,
            "field": "source",
            "message": "Bad value for source.  Expected: string of length between 1 and 128 characters."
          },
          {
            "code": 10201,
            "field": "type",
            "message": "Field type is missing. Expected: string value in ['sepa', 'creditcard', 'klarna', 'paypal']."
          },
          {
            "code": 10202,
            "field": "type",
            "message": "Bad value for type. string value in ['sepa', 'creditcard', 'klarna', 'paypal']."
          },
          {
            "code": 12255,
            "field": "payment",
            "message": "Field payment is missing. Expected: A valid object of type PaymentInstrumentPayment."
          },
          {
            "code": 12998,
            "field": "payment.riskIdentId",
            "message": "Bad value for payment.riskIdentId. Expected: A string object of length between 1 and 255."
          },
          {
            "code": 129999,
            "field": "payment.{unexpected_field}",
            "message": "Bad value for payment.{unexpected_field} is unknown. Expected: A valid object of type PaymentInstrumentPayment."
          },
          {
            "code": 16000,
            "field": "payment.cardNumber",
            "message": "Field payment.cardNumber is missing. Expected: string of length between 12 and 19 representing a valid creditcard number."
          },
          {
            "code": 16001,
            "field": "payment.cardNumber",
            "message": "Bad value for payment.cardNumber. Expected: string of length between 12 and 19 representing a valid creditcard number."
          },
          {
            "code": 16002,
            "field": "payment.verification",
            "message": "Field payment.verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
          },
          {
            "code": 16003,
            "field": "payment.verification",
            "message": "Bad value for payment.verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
          },
          {
            "code": 16004,
            "field": "payment.expiryMonth",
            "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '01' and '12 representing the month in a valid creditcard expiry date."
          },
          {
            "code": 16005,
            "field": "payment.expiryMonth",
            "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
          },
          {
            "code": 16006,
            "field": "payment.expiryYear",
            "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
          },
          {
            "code": 16007,
            "field": "payment.expiryYear",
            "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
          },
          {
            "code": 16008,
            "field": "payment.expiryMonth & payment.expiryYear",
            "message": "Bad value for combination of payment.expiryMonth and payment.exiryYear. Expected: payment.expiryMonth and payment.expiryYear combined should represent a valid credit card expiry date."
          },
          {
            "code": 16009,
            "field": "payment.cardHolder",
            "message": "Field payment.cardHolder is missing. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
          },
          {
            "code": 16010,
            "field": "payment.cardHolder",
            "message": "Bad value for payment.cardHolder. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
          },
          {
            "code": 16011,
            "field": "payment.bankName",
            "message": "Bad value for payment.bankName. Expected: string of length between 1 and 255 containing only alpha, whitespaces, numeric characters."
          },
          {
            "code": 16012,
            "field": "payment.iban",
            "message": "Field payment.iban is missing. Expected: string representing a valid IBAN from Belgium, Germany, Estonia, Finland, France, Greece, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, the Netherlands, Austria, Portugal, Slovakia, Slovenia, Spain, Switzerland or Cyprus."
          },
          {
            "code": 16013,
            "field": "payment.iban",
            "message": "Bad value for payment.iban. Expected: string representing a valid IBAN from Belgium, Germany, Estonia, Finland, France, Greece, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, the Netherlands, Austria, Portugal, Slovakia, Slovenia, Spain, Switzerland or Cyprus."
          },
          {
            "code": 16014,
            "field": "payment.bic",
            "message": "Field payment.bic is missing. Expected: string of length 8 or 11 representing a valid BIC representing a valid german BIC."
          },
          {
            "code": 16015,
            "field": "payment.bic",
            "message": "Bad value for payment.bic. Expected: string of length 8 or 11 representing a valid german BIC."
          },
          {
            "code": 16016,
            "field": "payment.accountHolder",
            "message": "Bad value for payment.accountHolder. Expected: string of length between 4 and 128."
          },
          {
            "code": 16031,
            "field": "payment.countryCode",
            "message": "Bad value for  payment.countryCode. Expected: 2 characters as per ISO 3166-1 alpha-2. Example: DE"
          },
          {
            "code": 16032,
            "field": "payment.compliantEmail",
            "message": "Bad value for  payment.compliantEmail. Expected: Email address."
          },
          {
            "code": 60013,
            "field": "payment.displayLanguage",
            "message": "Field payment.displayLanguage is missing. Expected: Valid ISO-639-1 country code."
          },
          {
            "code": 60014,
            "field": "payment.displayLanguage",
            "message": "Bad value for payment.displayLanguage. Expected: Valid ISO-639-1 country code. It should be one of 'de', 'en', 'fr' or 'it'."
          },
          {
            "code": 60015,
            "field": "payment.displayMobileScreen",
            "message": "Bad value for payment.displayMobileScreen.  Expected: 'true' or 'false'."
          }
        ],
        "items": {
          "$ref": "#/components/schemas/Error"
        }
      },
      "CreditCardCreditMeta": {
        "title": "CreditcardCreditMetaRequest",
        "type": "object",
        "properties": {
          "instant": {
            "type": "boolean",
            "description": "Indicator if the credit should be instant e.g. visa oct"
          }
        }
      },
      "NotificationSubscriptionRequest": {
        "title": "NotificationSubscriptionRequest",
        "required": [
          "notificationUrn"
        ],
        "type": "object",
        "properties": {
          "notificationUrn": {
            "maxLength": 2048,
            "minLength": 6,
            "type": "string",
            "description": "Callback URN which will receive the contents of the notification. <br> For http listeners, use an URN like https://your-domain-listener/specific-handler.\nFor email listeners, use an URN like mailto:specific-handler@your-domain-listener.\nFor notificationVersion \"2.0\" See the content to expect in the listener: TransactionContent.\nFor notificationVersion \"2.0\" 3ds.success see the content to expect in the listener: ThreeDsContent.\nNotification Service 2.0 is described here: https://docs.payengine.de/notifications/introduction",
            "format": "url"
          },
          "notificationEvent": {
            "type": "array",
            "description": "The list of Version Two event types to which this notification is subscribing.",
            "items": {
              "$ref": "#/components/schemas/NotificationEventEnum"
            }
          },
          "notificationVersion": {
            "type": "string",
            "description": "2.0: has to be submitted"
          }
        },
        "description": "An data structure that specifies callback URN and any other callback settings."
      },
      "NotificationEventEnum": {
        "title": "NotificationEventEnum",
        "type": "string",
        "description": "A choice of what kind of updates to receive by this handler as specified in this object's notificationUrn. <br> \"trx.preauth.pending\" to receive notification for PREAUTH transaction reaching PENDING status. Email is not supported for this notification. <br> \"trx.preauth.success\" to receive notification for PREAUTH transaction reaching OK status. <br> \"trx.preauth.failure\" to receive notification for PREAUTH transaction reaching FAILURE or ABORTED or DECLINED or EXPIRED status. <br> \"trx.cancel.initiated\" to receive notification for CANCEL transaction reaching OK status. <br> \"trx.cancel.success\" to receive notification for CANCEL transaction reaching SUCCESS status. <br> \"trx.cancel.failure\" to receive notification for CANCEL transaction reaching FAILURE or DECLINED status. <br> \"trx.debit.pending\" to receive notification for DEBIT transaction reaching PENDING status. Email is not supported for this notification. <br> \"trx.debit.initiated\" to receive notification for DEBIT transaction reaching OK status. <br> \"trx.debit.success\" to receive notification for DEBIT transaction reaching SUCCESS status. <br> \"trx.debit.failure\" to receive notification for DEBIT transaction reaching FAILURE or ABORTED or DECLINED or EXPIRED status. <br> \"trx.capture.initiated\" to receive notification for CAPTURE transaction reaching OK status. <br> \"trx.capture.success\" to receive notification for CAPTURE transaction reaching SUCCESS status. <br> \"trx.capture.failure\" to receive notification for CAPTURE transaction reaching FAILURE or DECLINED or EXPIRED status. <br> \"trx.refund.initiated\" to receive notification for REFUND transaction reaching OK status. <br> \"trx.refund.success\" to receive notification for REFUND transaction reaching SUCCESS status. <br> \"trx.refund.failure\" to receive notification for REFUND transaction reaching FAILURE, DECLINED status. <br> \"trx.credit.initiated\" to receive notification for CREDIT transaction reaching OK status. <br> \"trx.credit.success\" to receive notification for CREDIT transaction reaching SUCCESS status. <br> \"trx.credit.failure\" to receive notification for CREDIT transaction reaching FAILURE or ABORTED or DECLINED status. <br> \"3ds.result\" to receive notification for completed 3ds authorization."
      },
      "ArticleTypeEnum": {
        "title": "ArticleTypeEnum",
        "type": "string",
        "description": "This is the type of the article. Required for Klarna and optional for all other payment methods.",
        "enum": [
          "physical",
          "digital",
          "discount",
          "shipping_fee",
          "gift_card"
        ]
      },
      "TransactionType": {
        "title": "TransactionType",
        "type": "string",
        "description": "the type of the transaction",
        "enum": [
          "PREAUTH",
          "DEBIT",
          "CANCEL",
          "CAPTURE",
          "REFUND"
        ]
      },
      "TransactionStatesBaseTypeEnum": {
        "title": "TransactionStatesBaseTypeEnum",
        "type": "string",
        "description": "The current status of the transaction.\nThe status can be one of the following.\nCREATED, PENDING, IN_PROGRESS, OK, SUCCESS, FAILURE, DECLINED, ABORTED, EXPIRED\n",
        "enum": [
          "CREATED",
          "PENDING",
          "IN_PROGRESS",
          "OK",
          "SUCCESS",
          "FAILURE",
          "DECLINED",
          "ABORTED",
          "EXPIRED"
        ]
      },
      "Challenge": {
        "title": "Challenge",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the prepayment TAN challenge (can be displayed in the TAN form)\n"
          },
          "label": {
            "type": "string",
            "description": "The label of the prepayment tan challenge (can be displayed in the TAN form)\n"
          },
          "format": {
            "type": "string",
            "description": "The TAN format for prepayment (iTAN, photoTAN, etc.)\n"
          },
          "data": {
            "type": "string",
            "description": "Optional data field for prepayment is needed for some TAN formats e.g. photoTAN\n"
          }
        },
        "description": "Contains payment method specifc meta data. For prepayment TAN instructions.\n"
      },
      "MandateRequest": {
        "title": "Mandate",
        "type": "object",
        "properties": {
          "mandateId": {
            "type": "string",
            "description": "The mandateId assigned to the SEPA mandate (optional, payengine will generate the id if not present) The id needs to follow the following pattern '^[a-zA-Z0-9\\-]{1,35}'"
          },
          "createdDateTime": {
            "type": "number",
            "description": "Timestamp for mandate creation (mandatory)",
            "format": "date-time"
          },
          "mandateText": {
            "type": "string",
            "description": "Mandate text displayed to the customer (mandatory)"
          },
          "directDebitType": {
            "title": "DirectDebitType",
            "type": "string",
            "description": "The current mandate type of the direct debit type.\nThe mandate type can be one of the following.\nFIRST: It's the first execution of the mandate SINGLE: It's used only for one execution of the mandate RECURRING: It's used for recurring mandate usage FINAL: It's the last execution of the recurring mandate\n",
            "enum": [
              "FIRST",
              "SINGLE",
              "RECURRING",
              "FINAL"
            ]
          }
        },
        "description": "SEPA mandate (only mandatory for SEPA orders)"
      },
      "CofContractResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the COF contract of the payment instrument.\nIn case more than one COF type should be used for one paymentInstrument this identifier should be stored by the merchant and referenced in the payment transactions.",
            "example": "contract_123abc456x"
          },
          "type": {
            "$ref": "#/components/schemas/CofContractTypeEnum"
          },
          "channel": {
            "type": "string",
            "description": "The channel (entry mode) via which the COF initial storage transaction is processed.\nIf not passed it defaults to ECOM.",
            "example": "ECOM",
            "enum": [
              "ECOM",
              "MOTO"
            ]
          },
          "recurringExpiry": {
            "type": "string",
            "description": "Date after which no further authorizations shall be performed. This field is only required in case of an authentication for recurring payments.",
            "format": "date",
            "example": "2019-07-10T00:00:00.000Z"
          },
          "recurringFrequency": {
            "type": "number",
            "description": "Indicates the minimum number of days between authorizations. This field is only required in case of an authentication for recurring payments.",
            "example": 30
          }
        },
        "description": "The credentials on file (COF) contract object specifying the COF usage of the payment instrument. The presence of this object triggers an zero amount authorization (card check) for the given channel and type."
      },
      "CofContractTypeEnum": {
        "title": "CofContractTypeEnum",
        "type": "string",
        "description": "Credential on file type:\n   * `ONECLICK` - The payment instrument is persisted, recurring and can be used for oneClick payments.\n   * `UNSCHEDULED` - The payment instrument is persisted, recurring and can be used for merchant initiated unscheduled orders.\n   * `SCHEDULED` - The payment instrument is persisted, recurring and can be used for merchant initiated scheduled or instalments orders.",
        "enum": [
          "ONECLICK",
          "UNSCHEDULED",
          "SCHEDULED"
        ]
      },
      "ExternalCofData": {
        "title": "Merchant managed external COF contract data",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ExternalCofContractTypeEnum"
          },
          "initialSchemeTraceId": {
            "maxLength": 15,
            "minLength": 13,
            "type": "string",
            "description": "The initial Trace ID that was used for the MIT (merchant initiated transaction) mandate setup. This reference will be used by the card schemes to trace back the strong customer authentication that was provided with the initial CIT (cardholder initiated transaction) of the credential on file setup. The value should only be used if the handling of the CIT was done externally outside of the Payengine. Mandatory for subsequent MIT transactions.\n\nIf no schemeTraceId is available, the payengine allows this field to be null, initially. The response meta will contain a new 'schemeTraceId' provided by the credit card scheme which is to be supplied in subsequent order requests in this property.",
            "example": "123456789012345"
          }
        }
      },
      "TransactionMeta": {
        "title": "TransactionMeta",
        "type": "object",
        "properties": {
          "tanSent": {
            "type": "boolean",
            "description": "Flag which indicates if the TAN was sent to the bank\n"
          },
          "tanSchema": {
            "type": "string",
            "description": "The TAN schema which was used to finalize a online bank transfer based refund\n"
          }
        },
        "description": "Contains payment method specifc meta data. For prepayment TAN instructions.\n"
      },
      "PaymentInstrumentType": {
        "title": "PaymentInstrumentType",
        "type": "string",
        "description": "the type of the payment instrument",
        "enum": [
          "sepa",
          "creditcard",
          "paypal",
          "paydirekt",
          "bank-transfer"
        ]
      },
      "AuthenticationResult": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "Parameter indicating the version of the 3DS",
            "example": "2.0"
          },
          "status": {
            "type": "string",
            "description": "Indicates whether a transaction qualifies as an authenticated transaction.<br/><br/> Y = authentication verificationsuccessful<br/> A = authentication attempted; not authenticated, but a proof of attempted authentication is provided<br/> C = challenge required; additional SCA authentication is required<br/> U = authentication could not be performed; technical or other problem<br/> R = authentication rejected; issuer is rejecting<br/> N = not authenticated; transaction denied",
            "example": "Y",
            "enum": [
              "Y",
              "A",
              "C",
              "U",
              "R",
              "N"
            ]
          },
          "redirectUrl": {
            "type": "string",
            "description": "Conditional - present in case of 3DS 1.0 and challenge flow for 3DS 2.0 redirect URL leading to hosted page by Payengine used for Cardholder authentication (main flow for 3DS 1.0 and fallback flow in case of challenge for 3DS 2.0)",
            "example": "https://link-the-hosted-challenge.example"
          },
          "challengeData": {
            "$ref": "#/components/schemas/ChallengeData"
          },
          "transactionId": {
            "type": "string",
            "description": "The transaction identifier from the 3DS authentication\n3DS 1.0: This will be the XID\n3DS 2.0: This will be the dsTransID",
            "example": "d00b8de2-a2e4-11e9-a2a3-2a2ae2dbcce4"
          },
          "acsReferenceNumber": {
            "type": "string",
            "description": "Unique identifier assigned by the EMVCo Secretariat upon Testing and Approval. Set by the EMVCo Secretariat."
          },
          "acsSignedContent": {
            "type": "string",
            "description": "Contains the JWS object (represented as a string) created by the ACS for the ARes message. The body of JWS object (represented as a string) will contain the following data elements as defined • ACS URL • ACS Ephemeral Public Key (QT) • SDK Ephemeral Public Key (QC)"
          },
          "acsTransactionId": {
            "type": "string",
            "description": "Universally Unique transaction identifier assigned by the ACS to identify a single transaction. Canonical format as defined in IETF RFC 4122. May utilise any of the specified versions if the output meets specified requirements."
          },
          "authenticationValue": {
            "type": "string",
            "description": "The authenticationValue returned in the 3DS authentication\nCAVV: Visa, AMEX, JCB, Diners/Discover\nUCAF: Mastercard",
            "example": "YXV0aGVudGljYXRpb25WYWx1ZQ=="
          },
          "cardholderInfo": {
            "type": "string",
            "description": "Statement about the result of the 3DS authentication."
          },
          "eci": {
            "type": "string",
            "description": "The Electronic Commerce Indicator (ECI) provided by the ACS or DS to indicate the results of the attempt to authenticate the cardholder. The ECI values might differ depending on the card scheme.<br/> For all fully authenticated or authentication attempted transactions the liability will be shifted to the card issuer.<br/><br/> Mastercard<br/>\n  00 - fully authenticated<br/>\n  01 - authentication attempted<br/>\n  02 - no authentication available<br/>\n  07 - fully authenticated&#42;<sup>1</sup><br/><br/>\nAll other card schemes<br/>\n  05 - fully authenticated<br/>\n  06 - authentication attempted<br/>\n  07 - no authentication available<br/><br/>\n&#42;<sup>1</sup> - Mastercard distinguishes between fully authenticated recurring payments (flagged with ECI 07) and all other fully authenticated transactions (flagged with ECI 00).",
            "example": "05"
          },
          "statusReason": {
            "type": "string",
            "description": "Reason why the authenticationResult.status field has the specified value.<br/> 01 = Card authentication failed<br/> 02 = Unknown Device<br/> 03 = Unsupported Device<br/> 04 = Exceeds authentication frequency limit<br/> 05 = Expired card<br/> 06 = Invalid card number<br/> 07 = Invalid transaction<br/> 08 = No Card record<br/> 09 = Security failure<br/> 10 = Stolen card<br/> 11 = Suspected fraud<br/> 12 = Transaction not permitted to cardholder<br/> 13 = Cardholder not enrolled in service<br/> 14 = Transaction timed out at the ACS<br/> 15 = Low confidence<br/> 16 = Medium confidence<br/> 17 = High confidence<br/> 18 = Very High confidence<br/> 19 = Exceeds ACS maximum challenges<br/> 20 = Non-Payment transaction not supported<br/> 21 = 3RI transaction not supported<br/> 22 = ACS technical issue<br/> 23 = Decoupled Authentication required by ACS but not requested by 3DS Requestor<br/> 24 = 3DS Requestor Decoupled Max Expiry Time exceeded<br/> 25 = Decoupled Authentication was provided insufficient time to authenticate cardholder. ACS will not make attempt<br/> 26 = Authentication attempted but not performed by the cardholder<br/> 27–79 = Reserved for EMVCo future use (values invalid until defined by EMVCo)<br/> 80–99 = Reserved for DS use<br/>",
            "example": "01"
          },
          "forceChallenge": {
            "type": "boolean",
            "description": "Flag to force challenge for 3ds v2",
            "example": true
          },
          "errorDetails": {
            "$ref": "#/components/schemas/AuthenticationResultErrorData"
          }
        },
        "description": "Object containing the result of the 3DS authentication transaction (final results will be available only in case of frictionless flow)"
      },
      "AuthenticationResultErrorData": {
        "type": "object",
        "properties": {
          "providerCode": {
            "type": "string",
            "description": "Original error code from the 3DS server or mpi",
            "example": "301"
          },
          "providerMessage": {
            "type": "string",
            "description": "Original error message from the 3DS server or mpi",
            "example": "TRANSACTION_ID_NOT_RECOGNIZED"
          }
        },
        "description": "Object containing error information in case of error."
      },
      "Invoicing": {
        "title": "Invoicing",
        "type": "object",
        "properties": {
          "invoiceId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Merchant supplied unique reference on transaction level. Valid for PayPal and Creditcard only. For Creditcard minLength is limited to 30 characters."
          },
          "invoiceDate": {
            "type": "integer",
            "description": "Timestamp - earliest - 7 days before request, latest - day of request. Valid for PayPal only."
          },
          "deliveryDate": {
            "type": "integer",
            "description": "Timestamp - earliest - 365 days before request, latest - 365 days after request. Valid for PayPal only."
          },
          "dueDate": {
            "type": "integer",
            "description": "Timestamp - not before date of request AND not before invoice-date (if present). Valid for PayPal only."
          }
        }
      },
      "ThreeDsMetaRequest": {
        "title": "ThreeDsMetaRequest",
        "type": "object",
        "properties": {
          "threeDsAuthenticationId": {
            "type": "string",
            "description": "Id of successfull 3DS authentication",
            "example": "authentication_abc123xyz9"
          },
          "browserInfoId": {
            "type": "string",
            "description": "Payengine identifier of the browser info object",
            "example": "browserInfo_e1f6b193df"
          },
          "threeDsVersionId": {
            "type": "string",
            "description": "Payengine identifier of the 3DS version object",
            "example": "threedsversion_123abc456z"
          },
          "version": {
            "type": "string",
            "description": "Parameter indicating the version of the 3DS",
            "example": "2.0"
          },
          "transactionId": {
            "type": "string",
            "description": "The transaction identifier from the 3DS authentication\n3DS 1.0: This will be the XID\n3DS 2.0: This will be the dsTransID",
            "example": "8a880dc0-d2d2-4067-bcb1-b08d1690b26e"
          },
          "authenticationValue": {
            "type": "string",
            "description": "The authenticationValue returned in the 3DS authentication\nCAVV: Visa, AMEX, JCB, Diners/Discover\nUCAF: Mastercard",
            "example": "MTIzNDU2Nzg5MDA5ODc2NTQzMjE="
          },
          "eci": {
            "type": "string",
            "description": "The Electronic Commerce Indicator (ECI) provided by the ACS or DS to indicate the results of the attempt to authenticate the cardholder.<br>\nThe ECI values might differ depending on the card scheme. <br/> For all fully authenticated or authentication attempted transactions the liability will be shifted to the card issuer.<br/><br/> Mastercard<br/>\n  00 - fully authenticated<br/>\n  01 - authentication attempted<br/>\n  02 - no authentication available<br/>\n  07 - fully authenticated&#42;<sup>1</sup><br/><br/>\nAll other card schemes<br/>\n  05 - fully authenticated<br/>\n  06 - authentication attempted<br/>\n  07 - no authentication available<br/><br/>\n&#42;<sup>1</sup> - Mastercard distinguishes between fully authenticated recurring payments (flagged with ECI 07) and all other fully authenticated transactions (flagged with ECI 00).",
            "example": "05"
          },
          "forceChallenge": {
            "type": "boolean",
            "description": "Flag to force challenge for 3ds v2",
            "example": true
          }
        }
      },
      "ExternalCofContractTypeEnum": {
        "title": "ExternalCofContractTypeEnum",
        "type": "string",
        "description": "The type of the credential on file usage.\n   * `UNSCHEDULED` - The payment credentials can be used for merchant initiated unscheduled orders.\n   * `SCHEDULED` - The payment credentials can be used for merchant initiated scheduled orders.",
        "enum": [
          "UNSCHEDULED",
          "SCHEDULED"
        ]
      },
      "LastOperationTypeEnum": {
        "title": "LastOperationTypeEnum",
        "type": "string",
        "description": "A combined field of the last executed transaction and the status of the transaction. \"TRANSACTION_<TRANSACTION_TYPE>_<TRANSACTION_STATUS>\"",
        "enum": [
          "TRANSACTION_PREAUTH_OK",
          "TRANSACTION_PREAUTH_CREATED",
          "TRANSACTION_PREAUTH_IN_PROGRESS",
          "TRANSACTION_PREAUTH_PENDING",
          "TRANSACTION_PREAUTH_FAILURE",
          "TRANSACTION_PREAUTH_DECLINED",
          "TRANSACTION_PREAUTH_ABORTED",
          "TRANSACTION_PREAUTH_EXPIRED",
          "TRANSACTION_CANCEL_OK",
          "TRANSACTION_CANCEL_SUCCESS",
          "TRANSACTION_CANCEL_CREATED",
          "TRANSACTION_CANCEL_IN_PROGRESS",
          "TRANSACTION_CANCEL_FAILURE",
          "TRANSACTION_CANCEL_DECLINED",
          "TRANSACTION_DEBIT_OK",
          "TRANSACTION_DEBIT_SUCCESS",
          "TRANSACTION_DEBIT_CREATED",
          "TRANSACTION_DEBIT_IN_PROGRESS",
          "TRANSACTION_DEBIT_PENDING",
          "TRANSACTION_DEBIT_FAILURE",
          "TRANSACTION_DEBIT_DECLINED",
          "TRANSACTION_DEBIT_ABORTED",
          "TRANSACTION_DEBIT_EXPIRED",
          "TRANSACTION_CAPTURE_OK",
          "TRANSACTION_CAPTURE_SUCCESS",
          "TRANSACTION_CAPTURE_CREATED",
          "TRANSACTION_CAPTURE_IN_PROGRESS",
          "TRANSACTION_CAPTURE_FAILURE",
          "TRANSACTION_CAPTURE_DECLINED",
          "TRANSACTION_CAPTURE_EXPIRED",
          "TRANSACTION_REFUND_OK",
          "TRANSACTION_REFUND_SUCCESS",
          "TRANSACTION_REFUND_CREATED",
          "TRANSACTION_REFUND_IN_PROGRESS",
          "TRANSACTION_REFUND_FAILURE",
          "TRANSACTION_REFUND_DECLINED",
          "TRANSACTION_CREDIT_OK",
          "TRANSACTION_CREDIT_SUCCESS",
          "TRANSACTION_CREDIT_CREATED",
          "TRANSACTION_CREDIT_IN_PROGRESS",
          "TRANSACTION_CREDIT_PENDING",
          "TRANSACTION_CREDIT_FAILURE",
          "TRANSACTION_CREDIT_ABORTED",
          "TRANSACTION_CREDIT_DECLINED",
          "TRANSACTION_CHARGEBACK_CHARGEBACK",
          "TRANSACTION_CHARGEBACK_BOOKED",
          "TRANSACTION_CHARGEBACK_LIFTED",
          "TRANSACTION_CHARGEBACK_BOOKIN"
        ]
      },
      "ChallengeData": {
        "type": "object",
        "properties": {
          "acsUrl": {
            "type": "string",
            "description": "Fully qualified URL of the ACS in case the authentication response message indicates that further cardholder interaction is required to complete the authentication. relevant for 3DS 2.0 only",
            "example": "https://link-to-the-issuer.acs"
          },
          "base64EncodedChallengeRequest": {
            "type": "string",
            "description": "Base64-encoded Challenge Request object in case the authentication response message indicates that further Cardholder interaction is required to complete the authentication. (3DS 2.0)",
            "example": "Y2hhbGxhbmdlRGF0YQ=="
          },
          "challengeWindowSize": {
            "type": "string",
            "description": "Dimensions of the challenge iframe window in which the challenge page will be displayed to the Cardholder. This value should match the provided size in the browserInfo call.\nEMVCo assigned window size.\n'01' -> 250px x 400px,\n'02' -> 390px x 400px,\n'03' -> 500px x 600px,\n'04' -> 600px x 400px,\n'05' -> Full screen, or full container content\nrelevant for 3DS 2.0 only",
            "example": "05",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05"
            ]
          }
        },
        "description": "Conditional - information available in case of CHALLENGE status, needed for building the challenge iFrame."
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "field": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "Basic",
        "description": "Authorization: Basic base64(merchantId:apiKey)"
      }
    }
  }
}
