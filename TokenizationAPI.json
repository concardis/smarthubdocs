{
  "openapi": "3.0.1",
  "info": {
    "version": "v1",
    "title": "Tokenization API",
    "description": "The Tokenization API is used for creating token references of payment data."
  },
  "servers": [
    {
      "url": "https://apitest.payengine.de/v1",
      "description": "Test"
    },
    {
      "url": "https://api.payengine.de/v1",
      "description": "Live"
    }
  ],
  "paths": {
    "/payment-instruments": {
      "post": {
        "summary": "Tokenize a payment instrument\n",
        "description": "Endpoint to create a new payment instrument.\nThe service will store the payment credentials and return a paymentInstrumentId which can be used as a token for referencing the credentials for any payment operation.\n\nThe storage complies with the latest PCI standards and regulations.\n\nA payment instrument can be created either explicitly (e.g. for credit card & sepa) or implicitly as part of a preauth or debit transaction.\nPayment instruments can be used for recurring payments, if the flag \"recurring\" is set to true.\n",
        "operationId": "createPaymentInstrument",
        "requestBody": {
          "description": "Request body to create a new paymentinstrument.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentInstrumentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request based on invalid input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentsPostBadRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "get": {
        "summary": "Get a list of payment instruments",
        "description": "Endpoint to receive a list of available paymentinstruments.\n\n\nThe following parameters can be used as filter.\n- paymentInstrumentId\n- merchantPaymentInstrumentId\n- type\n- origin\n- recurring\n- createdAt\n- modifiedAt\n",
        "operationId": "PaymentInstruments",
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentList"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/payment-instruments/{paymentInstrumentId}": {
      "get": {
        "summary": "Get a payment instrument\n",
        "description": "Endpoint to receive a specific payment instrument referencing the paymentInstrumentId.\n",
        "operationId": "getPaymentInstrument",
        "parameters": [
          {
            "name": "paymentInstrumentId",
            "in": "path",
            "description": "ID of the specific paymentinstrument.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found caused by invalid input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentsGetNotFound"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Update a payment instrument\n",
        "description": "Endpoint to update an existing payment instrument referencing the paymentInstrumentId.\n\nCan be used to refresh the verification code (CVC) for card payment instruments, e.g. in case of a recurring transaction the shopper can be forced to re-enter the CVC.\n",
        "operationId": "updatePaymentInstrument",
        "parameters": [
          {
            "name": "paymentInstrumentId",
            "in": "path",
            "description": "ID of the specific paymentinstrument.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request object containing some or all of the updateable fields applicable for the type of the specified payment instrument. (CC or SEPA)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentInstrumentUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request caused by invalid input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentsPatchBadRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "summary": "Delete a payment instrument",
        "description": "Endpoint to delete an existing payment instrument referencing the paymentInstrumentId.\n",
        "operationId": "DeletePaymentInstrumentByPaymentInstrumentId",
        "parameters": [
          {
            "name": "paymentInstrumentId",
            "in": "path",
            "description": "ID of the specific paymentinstrument.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "404": {
            "description": "Not found caused by invalid input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentsGetNotFound"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/payment-instruments/{paymentInstrumentId}/card-check": {
      "post": {
        "summary": "Initiate a card check",
        "description": "Service to initiate a card check which will results in a 0,00 EUR authorization.\n\nThe card check authorization can be used as an initial authorization containing the 3DS information in case the merchant only stores the payment credentials and at this point no real payment should be initiated.\n",
        "operationId": "createCardcheckForPaymentInstrument",
        "parameters": [
          {
            "name": "paymentInstrumentId",
            "in": "path",
            "description": "ID of the specific paymentinstrument.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body to create a cardcheck",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardcheckRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardcheckResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "PaymentInstrumentList": {
        "title": "PaymentInstrumentList",
        "required": [
          "elements",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "description": "A list of paymeninstruments.",
            "items": {
              "$ref": "#/components/schemas/PaymentInstrumentResponse"
            }
          },
          "totalPages": {
            "minimum": 1,
            "type": "number",
            "description": "A counter for the total pages returned.",
            "format": "int"
          }
        }
      },
      "PaymentInstrumentRequest": {
        "title": "PaymentInstrumentRequest",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ProductEnum"
          },
          "merchantPaymentInstrumentId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the paymentinstrument on your system. Created by you. limited to 100 characters."
          },
          "payment": {
            "$ref": "#/components/schemas/PaymentInstrumentPayment"
          }
        },
        "example": {
          "type": "creditcard",
          "payment": {
            "cardNumber": 4111111111111111,
            "verification": 123,
            "expiryMonth": 12,
            "expiryYear": 21,
            "cardHolder": "Max Mustermann"
          }
        }
      },
      "PaymentInstrumentResponse": {
        "title": "PaymentInstrumentResponse",
        "required": [
          "attributes",
          "merchantPaymentInstrumentId",
          "origin",
          "paymentInstrumentId",
          "recurring",
          "type"
        ],
        "type": "object",
        "properties": {
          "paymentInstrumentId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the paymentinstrument. Created by payengine"
          },
          "merchantPaymentInstrumentId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the paymentinstrument on your system. Created by you. limited to 100 characters."
          },
          "origin": {
            "$ref": "#/components/schemas/ProductsBaseTypeEnum"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentInstrumentType"
          },
          "recurring": {
            "type": "boolean",
            "description": "This flag indicates if this paymentinstrument can be used for recurring payments."
          },
          "createdAt": {
            "type": "integer",
            "description": "Timestamp when it was created"
          },
          "modifiedAt": {
            "type": "integer",
            "description": "Timestamp when it was last updated"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "cofContracts": {
                "type": "array",
                "description": "For CreditCard only",
                "items": {
                  "$ref": "#/components/schemas/CofContractResponse"
                }
              },
              "customerRelationUuid": {
                "type": "string",
                "description": "For TWINT only. Recognition of a returning customer."
              }
            },
            "description": "Additional attributes of this paymentinstrument. E.g. masked bank- or creditcarddata.<br> For Klarna we will have possibleTypes object in the response (e.g. klarna-pay-now, klarna-pay-later, klarna-slice-it)<br> Also we will have country, and locale.<br> For PPRO payments methods we could have accountHolder (if one was used for making the transaction)"
          }
        },
        "description": "The paymentinstrument which has been used to process this order. note: If no paymentinstrument has been submitted, one has been created with your submitted data.",
        "example": {
          "createdAt": 1627979362448,
          "modifiedAt": 1627979362467,
          "paymentInstrumentId": "paymentinstrument_obgx6tkpgw",
          "merchantPaymentInstrumentId": null,
          "attributes": {
            "cardHolder": "Max Mustermann",
            "cardNumber": "************1111",
            "brand": "VISA",
            "expiryMonth": "12",
            "expiryYear": "21",
            "issuerCountry": "US",
            "cofContracts": [
              {
                "id": "contract_123abc456x",
                "type": "ONECLICK",
                "channel": "ECOM",
                "recurringExpiry": "2024-07-10T00:00:00.000Z",
                "recurringFrequency": 30
              }
            ]
          },
          "encrypted": true,
          "origin": "creditcard",
          "type": "creditcard",
          "recurring": true
        }
      },
      "PaymentInstrumentsPostBadRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "example": "v1/payment-instruments"
          },
          "timestamp": {
            "type": "number",
            "format": "date-time",
            "example": 1603275671582
          },
          "status": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Error while creating payment instrument!"
          },
          "code": {
            "type": "number",
            "example": 10003
          },
          "globalTrackId": {
            "type": "string",
            "example": "Some Request ID"
          },
          "errors": {
            "title": "Errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentInstrumentsPostErrors"
            }
          }
        }
      },
      "PaymentInstrumentsGetNotFound": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "example": "v1/payment-instruments/paymentinstrument_asdfghjk"
          },
          "timestamp": {
            "type": "number",
            "format": "date-time",
            "example": 1603275671582
          },
          "status": {
            "type": "number",
            "example": 404
          },
          "message": {
            "type": "string",
            "example": "Error while fetching payment instrument!"
          },
          "code": {
            "type": "number",
            "example": 10001
          },
          "globalTrackId": {
            "type": "string",
            "example": "Some Request ID"
          },
          "errors": {
            "title": "Errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentInstrumentsGetErrors"
            }
          }
        }
      },
      "PaymentInstrumentUpdateRequest": {
        "title": "PaymentInstrumentUpdateRequest",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the selected payment method provided by Klarna. E.g. klarna-pay-later"
          },
          "verification": {
            "maxLength": 4,
            "minLength": 3,
            "type": "string",
            "description": "The verification number of the creditcard. (CC only)"
          },
          "expiryMonth": {
            "type": "string",
            "description": "The expiry month of the creditcard. (CC only)"
          },
          "expiryYear": {
            "type": "string",
            "description": "The expiry year of the creditcard. (CC only)"
          },
          "cardHolder": {
            "type": "string",
            "description": "The name of the creditcard holder. (CC only)"
          },
          "bankName": {
            "type": "string",
            "description": "The name of the bank. (SEPA only)"
          },
          "bic": {
            "type": "string",
            "description": "The BIC of the bank. (SEPA only)"
          },
          "accountHolder": {
            "type": "string",
            "description": "The name of the bank account holder. (SEPA only)"
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Country which is used"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Currency which is used"
          },
          "locale": {
            "type": "string",
            "description": "Locale which is used"
          },
          "customer": {
            "type": "string",
            "description": "The id of the customer"
          },
          "billingAddress": {
            "type": "string",
            "description": "The id of the billing address"
          },
          "shippingAddress": {
            "type": "string",
            "description": "The id of the shipping address"
          },
          "mandate": {
            "$ref": "#/components/schemas/MandateRequest"
          },
          "basket": {
            "$ref": "#/components/schemas/BasketRequest"
          },
          "notifyUrl": {
            "maxLength": 2048,
            "minLength": 6,
            "type": "string",
            "description": "Only for PayPal (mandatory) - The URL at which the instant payment notifications (IPN) are sent to notify<br> the merchant when the agreement is created or canceled or payments on the agreement are processed."
          }
        },
        "example": {
          "verification": "111",
          "expiryMonth": "12",
          "expiryYear": "21",
          "cardHolder": "Max Mustermann"
        }
      },
      "PaymentInstrumentsPatchBadRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "example": "v1/payment-instruments/paymentinstrument_asdfghjk"
          },
          "timestamp": {
            "type": "number",
            "format": "date-time",
            "example": 1603275671582
          },
          "status": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Error while updating payment instrument!"
          },
          "code": {
            "type": "number",
            "example": 10003
          },
          "globalTrackId": {
            "type": "string",
            "example": "Some Request ID"
          },
          "errors": {
            "title": "Errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentInstrumentsPatchErrors"
            }
          }
        }
      },
      "PaymentInstrumentPayment": {
        "title": "PaymentInstrumentPayment",
        "type": "object",
        "properties": {
          "cardNumber": {
            "maxLength": 19,
            "minLength": 12,
            "type": "string",
            "description": "The Creditcard PAN used to proceed. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)"
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The country which is used. (mandatory for klarna)"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The currency which is used. (mandatory for klarna)"
          },
          "locale": {
            "type": "string",
            "description": "The locale which is used. (mandatory for klarna)"
          },
          "verification": {
            "maxLength": 4,
            "minLength": 3,
            "type": "string",
            "description": "The verification number of the creditcard. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)"
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The expiry month of the creditcard. Format: 01 -> january, 02 -> February, etc. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)"
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The expiry year of the creditcard. Format: 01 -> 2001, 02 -> 2002, etc. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)"
          },
          "cardHolder": {
            "maxLength": 128,
            "minLength": 3,
            "type": "string",
            "description": "The full name of the cardholder."
          },
          "bankName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the bank of the SEPA account.",
            "example": "Deutsche Bank"
          },
          "iban": {
            "maxLength": 34,
            "type": "string",
            "description": "IBAN of the SEPA account. (mandatory for sepa, optional if a sepa paymentInstrumentId was passed)",
            "example": "DE15111111111111111199"
          },
          "bic": {
            "maxLength": 11,
            "minLength": 8,
            "type": "string",
            "description": "BIC of the bank account. (mandatory for sepa payments with a non german iban, optional if a sepa<br> paymentInstrumentId was passed<br> optional for ideal and sofort-collecting)",
            "example": "DEUTDEDBKOE"
          },
          "accountHolder": {
            "maxLength": 128,
            "minLength": 4,
            "type": "string",
            "description": "The account holders name of the bank account. (Optional parameter for PPRO payments methods<br> The maxLength value only for PPRO payment methods is 100.",
            "example": "Max Muster"
          },
          "customer": {
            "type": "string",
            "description": "ID of the customer"
          },
          "mandate": {
            "$ref": "#/components/schemas/MandateRequest"
          },
          "basket": {
            "$ref": "#/components/schemas/BasketRequest"
          },
          "returnUrl": {
            "maxLength": 2048,
            "minLength": 6,
            "type": "string",
            "description": "Only for PayPal (mandatory) - The URL to which to redirect the customer when he or she accepts an agreement."
          },
          "cancelUrl": {
            "maxLength": 2048,
            "minLength": 6,
            "type": "string",
            "description": "Only for PayPal (mandatory) - The URL to which to redirect the customer when he or she cancels an agreement."
          },
          "notifyUrl": {
            "maxLength": 2048,
            "minLength": 6,
            "type": "string",
            "description": "Only for PayPal (optional) - The URL at which the instant payment notifications (IPN) are sent to notify<br> the merchant when the agreement is created or canceled or payments on the agreement are processed."
          },
          "billingAgreementId": {
            "type": "object",
            "description": "Only for PayPal (optional) - when PayPal Billing Agreement is created by third party provider<br> If billingAgreementId is provided, thеn the fields returnUrl, cancelUrl and notifyUrl are optional and should be ignored type: string"
          },
          "protocolVersion": {
            "type": "string",
            "description": "Protocol version as provided from google."
          },
          "signature": {
            "type": "string",
            "description": "signature as provided by google."
          },
          "signedMessage": {
            "type": "string",
            "description": "signed message as provided by google."
          },
          "intermediateSigningKey": {
            "$ref": "#/components/schemas/IntermediateSigningKey"
          }
        }
      },
      "PaymentInstrumentsPostErrors": {
        "type": "array",
        "example": [
          {
            "code": 10201,
            "field": "type",
            "message": "Field type is missing. Expected: string value in ['sepa', 'creditcard', 'klarna', 'paypal']."
          },
          {
            "code": 10202,
            "field": "type",
            "message": "Bad value for type. string value in ['sepa', 'creditcard', 'klarna', 'paypal']."
          },
          {
            "code": 10203,
            "field": "payment",
            "message": "Field payment is missing. Expected: A valid object of type PaymentInstrumentPayment."
          },
          {
            "code": 10204,
            "field": "payment.{unexpected_field}",
            "message": "Bad value for payment.{unexpected_field} is unknown. Expected: A valid object of type PaymentInstrumentPayment."
          },
          {
            "code": 16000,
            "field": "payment.cardNumber",
            "message": "Field payment.cardNumber is missing. Expected: string of length between 12 and 19 representing a valid creditcard number."
          },
          {
            "code": 16001,
            "field": "payment.cardNumber",
            "message": "Bad value for payment.cardNumber. Expected: string of length between 12 and 19 representing a valid creditcard number."
          },
          {
            "code": 16003,
            "field": "payment.verification",
            "message": "Bad value for payment.verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
          },
          {
            "code": 16004,
            "field": "payment.expiryMonth",
            "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '01' and '12 representing the month in a valid creditcard expiry date."
          },
          {
            "code": 16005,
            "field": "payment.expiryMonth",
            "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
          },
          {
            "code": 16006,
            "field": "payment.expiryYear",
            "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
          },
          {
            "code": 16007,
            "field": "payment.expiryYear",
            "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
          },
          {
            "code": 16008,
            "field": "payment.expiryMonth & payment.expiryYear",
            "message": "Bad value for combination of payment.expiryMonth and payment.exiryYear. Expected: payment.expiryMonth and payment.expiryYear combined should represent a valid credit card expiry date."
          },
          {
            "code": 16010,
            "field": "payment.cardHolder",
            "message": "Bad value for payment.cardHolder. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
          },
          {
            "code": 16011,
            "field": "payment.bankName",
            "message": "Bad value for payment.bankName. Expected: string of length between 1 and 255 containing only alpha, whitespaces, numeric characters."
          },
          {
            "code": 16012,
            "field": "payment.iban",
            "message": "Field payment.iban is missing. Expected: string representing a valid IBAN from Belgium, Germany, Estonia, Finland, France, Greece, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, the Netherlands, Austria, Portugal, Slovakia, Slovenia, Spain, Switzerland or Cyprus."
          },
          {
            "code": 16013,
            "field": "payment.iban",
            "message": "Bad value for payment.iban. Expected: string representing a valid IBAN from Belgium, Germany, Estonia, Finland, France, Greece, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, the Netherlands, Austria, Portugal, Slovakia, Slovenia, Spain, Switzerland or Cyprus."
          },
          {
            "code": 16015,
            "field": "payment.bic",
            "message": "Bad value for payment.bic. Expected: string of length 8 or 11 representing a valid BIC from Belgium, Germany, Estonia, Finland, France, Greece, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, the Netherlands, Austria, Portugal, Slovakia, Slovenia, Spain, Switzerland or Cyprus."
          },
          {
            "code": 16016,
            "field": "payment.accountHolder",
            "message": "Bad value for payment.accountHolder. Expected: string of length between 4 and 128."
          },
          {
            "code": 53014,
            "field": "payment.basket",
            "message": "Field payment.basket is missing. Expected: An array of articles for 'basket'."
          },
          {
            "code": 53015,
            "field": "payment.country",
            "message": "Field payment.country is missing. Expected: 2 characters as per ISO 3166-1 alpha-2. Example: DE."
          },
          {
            "code": 53016,
            "field": "payment.currency",
            "message": "Field payment.currency is missing. Expected: 3 characters as per ISO 4217. Example: EUR."
          },
          {
            "code": 53017,
            "field": "payment.locale",
            "message": "Field payment.locale is missing. Expected: 4+1 characters as per RFC 1766. Example: en-DE."
          },
          {
            "code": 16033,
            "field": "payment.returnUrl",
            "message": "Field payment.returnUrl is missing. Expected: string representing a valid URL."
          },
          {
            "code": 16034,
            "field": "payment.returnUrl",
            "message": "Bad value for payment.returnUrl. Expected: string representing a valid URL."
          },
          {
            "code": 16035,
            "field": "payment.returnUrl",
            "message": "Bad value for payment.returnUrl. This field is not allowed for update."
          },
          {
            "code": 16036,
            "field": "payment.cancelUrl",
            "message": "Field payment.cancelUrl is missing. Expected: string representing a valid URL."
          },
          {
            "code": 16037,
            "field": "payment.cancelUrl",
            "message": "Bad value for payment.cancelUrl. Expected: string representing a valid URL."
          },
          {
            "code": 16038,
            "field": "payment.cancelUrl",
            "message": "Bad value for payment.cancelUrl. This field is not allowed for update."
          },
          {
            "code": 16039,
            "field": "payment.notifyUrl",
            "message": "Field payment.notifyUrl is missing. This field is required for update."
          },
          {
            "code": 16040,
            "field": "payment.notifyUrl",
            "message": "Bad value for payment.notifyUrl. Expected: string representing a valid URL."
          },
          {
            "code": 16041,
            "field": "payment.billingAgreementId",
            "message": "Bad value for payment.billingAgreementId. This field is not allowed for update."
          }
        ],
        "items": {
          "$ref": "#/components/schemas/Error"
        }
      },
      "PaymentInstrumentsGetErrors": {
        "type": "array",
        "example": [
          {
            "code": 10101,
            "field": "paymentInstrumentId",
            "message": "A Payment Instrument with specified id can not be found. Expected: A valid string identifier representing a Payment Instrument object between 1 and 255 characters."
          }
        ],
        "items": {
          "$ref": "#/components/schemas/Error"
        }
      },
      "PaymentInstrumentsPatchErrors": {
        "type": "array",
        "example": [
          {
            "code": 10204,
            "field": "verification",
            "message": "Field verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
          },
          {
            "code": 10205,
            "field": "verification",
            "message": "Bad value for verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
          }
        ],
        "items": {
          "$ref": "#/components/schemas/Error"
        }
      },
      "CardcheckRequest": {
        "type": "object",
        "properties": {
          "cofContract": {
            "$ref": "#/components/schemas/CofContractRequest"
          },
          "threeDsAuthenticationId": {
            "type": "string",
            "description": "Identifier of the 3DS authentication in case they should be passed together with the card check authorization to mark an initial COF transaction.",
            "example": "threeDsAuthentication_123abc987y"
          }
        },
        "example": {
          "cofContract": {
            "type": "UNSCHEDULED",
            "channel": "ECOM"
          },
          "threeDsData": {
            "threeDsAuthenticationId": "Authentication-5eff4f00-7ce1-4cf7-bccb-da40bbc876ef"
          }
        }
      },
      "CardcheckResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique transaction identifier generated by the Payengine.",
            "example": "cardcheck_abc123xyz4"
          },
          "createdAt": {
            "type": "number",
            "description": "Timestamp when card check was initiated.",
            "example": 1562574062133
          },
          "modifiedAt": {
            "type": "number",
            "description": "Timestamp when card check was modified.",
            "example": 1562574062133
          },
          "status": {
            "type": "string",
            "description": "The status of the card check.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ]
          },
          "threeDsAuthenticationId": {
            "type": "string",
            "description": "Identifier of the 3DS authentication in case they should be passed together with the card check authorization to mark an initial COF transaction.",
            "example": "authentication_123abc456x"
          },
          "cofContract": {
            "$ref": "#/components/schemas/CofContractResponse"
          },
          "errorDetails": {
            "$ref": "#/components/schemas/CardcheckErrorDetails"
          }
        },
        "example": {
          "id": "CardCheckRequest-cbc13759-88c9-4d5e-be85-4aa1bb374fb6",
          "createdAt": 1561555495930,
          "modifiedAt": 1561555495930,
          "status": "SUCCESS",
          "paymentInstrumentId": "paymentinstrument_fphmcnsets",
          "cofContract": {
            "id": "CofContract-be02b203-0817-4deb-9fb9-fa4790db1a1c",
            "type": "UNSCHEDULED",
            "channel": "ECOM",
            "createdAt": 1561555495930,
            "recurringExpiry": "2050-01-01",
            "recurringFrequency": 30
          },
          "threeDsData": {
            "threeDsAuthenticationId": "Authentication-5eff4f00-7ce1-4cf7-bccb-da40bbc876ef"
          },
          "errorDetails": null
        }
      },
      "CardCheckBadRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "example": "v1/creditcard/card-check/cardcheck_asdfghjk"
          },
          "timestamp": {
            "type": "number",
            "format": "date-time",
            "example": 1603275671582
          },
          "status": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Expected: valid identifier for card check transaction."
          },
          "code": {
            "type": "number",
            "example": 25744
          },
          "globalTrackId": {
            "type": "string",
            "example": "Some Request ID"
          }
        }
      },
      "CofContractRequest": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CofContractTypeEnum"
          },
          "channel": {
            "type": "string",
            "description": "The channel (entry mode) via which the COF initial storage transaction is processed.\nIf not passed it defaults to ECOM.",
            "example": "ECOM",
            "enum": [
              "ECOM",
              "MOTO"
            ]
          }
        },
        "description": "The credentials on file (COF) contract object specifying the COF usage of the payment instrument. The presence of this object triggers an zero amount authorization (card check) for the given channel and type."
      },
      "CofContractResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the COF contract of the payment instrument.\nIn case more than one COF type should be used for one paymentInstrument this identifier should be stored by the merchant and referenced in the payment transactions.",
            "example": "contract_123abc456x"
          },
          "type": {
            "$ref": "#/components/schemas/CofContractTypeEnum"
          },
          "channel": {
            "type": "string",
            "description": "The channel (entry mode) via which the COF initial storage transaction is processed.\nIf not passed it defaults to ECOM.",
            "example": "ECOM",
            "enum": [
              "ECOM",
              "MOTO"
            ]
          },
          "recurringExpiry": {
            "type": "string",
            "description": "Date after which no further authorizations shall be performed. This field is only required in case of an authentication for recurring payments.",
            "format": "date",
            "example": "2019-07-10T00:00:00.000Z"
          },
          "recurringFrequency": {
            "type": "number",
            "description": "Indicates the minimum number of days between authorizations. This field is only required in case of an authentication for recurring payments.",
            "example": 30
          }
        },
        "description": "The credentials on file (COF) contract object specifying the COF usage of the payment instrument. The presence of this object triggers an zero amount authorization (card check) for the given channel and type."
      },
      "CofContractTypeEnum": {
        "title": "CofContractTypeEnum",
        "type": "string",
        "description": "Credential on file type:\n   * `ONECLICK` - The payment instrument is persisted, recurring and can be used for oneClick payments.\n   * `UNSCHEDULED` - The payment instrument is persisted, recurring and can be used for merchant initiated unscheduled orders.\n   * `SCHEDULED` - The payment instrument is persisted, recurring and can be used for merchant initiated scheduled or instalments orders.",
        "enum": [
          "ONECLICK",
          "UNSCHEDULED",
          "SCHEDULED"
        ]
      },
      "CardcheckErrorDetails": {
        "type": "object",
        "properties": {
          "providerCode": {
            "type": "string",
            "description": "Card processor code in case of an error.",
            "example": "00"
          },
          "providerMessage": {
            "type": "string",
            "description": "Card processor message in case of an error.",
            "example": "Transaction Approved"
          }
        },
        "description": "Object containing error information in case of a FAILURE status."
      },
      "ProductEnum": {
        "title": "productEnum",
        "type": "string",
        "description": "The product which is represented by a paymentinstrument.",
        "enum": [
          "creditcard",
          "sepa",
          "klarna",
          "paypal"
        ]
      },
      "ProductsBaseTypeEnum": {
        "title": "ProductsBaseTypeEnum",
        "type": "string",
        "description": "The product used to create this order. (mandatory)",
        "enum": [
          "creditcard",
          "paypal",
          "paydirekt",
          "ratepay-invoice",
          "ratepay-directdebit",
          "ratepay-installment",
          "sepa",
          "sofort",
          "klarna-pay-now",
          "klarna-pay-later",
          "klarna-slice-it",
          "prepayment",
          "giropay",
          "eps",
          "ideal",
          "alipay",
          "bancontact",
          "wechat-pay",
          "postfinance-card",
          "payu",
          "paysafecard",
          "twint",
          "union-pay"
        ]
      },
      "PaymentInstrumentType": {
        "title": "PaymentInstrumentType",
        "type": "string",
        "description": "the type of the payment instrument",
        "enum": [
          "sepa",
          "creditcard",
          "paypal",
          "paydirekt",
          "bank-transfer"
        ]
      },
      "MandateRequest": {
        "title": "Mandate",
        "type": "object",
        "properties": {
          "mandateId": {
            "type": "string",
            "description": "The mandateId assigned to the SEPA mandate (optional, payengine will generate the id if not present) The id needs to follow the following pattern '^[a-zA-Z0-9\\-]{1,35}'"
          },
          "createdDateTime": {
            "type": "number",
            "description": "Timestamp for mandate creation (mandatory)",
            "format": "date-time"
          },
          "mandateText": {
            "type": "string",
            "description": "Mandate text displayed to the customer (mandatory)"
          },
          "directDebitType": {
            "title": "DirectDebitType",
            "type": "string",
            "description": "The current mandate type of the direct debit type.\nThe mandate type can be one of the following.\nFIRST: It's the first execution of the mandate SINGLE: It's used only for one execution of the mandate RECURRING: It's used for recurring mandate usage FINAL: It's the last execution of the recurring mandate\n",
            "enum": [
              "FIRST",
              "SINGLE",
              "RECURRING",
              "FINAL"
            ]
          }
        },
        "description": "SEPA mandate (only mandatory for SEPA orders)"
      },
      "BasketRequest": {
        "title": "Basket",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the article"
          },
          "articleType": {
            "$ref": "#/components/schemas/ArticleTypeEnum"
          },
          "articleUrl": {
            "type": "string",
            "description": "This is the url of the item in the basket"
          },
          "imageUrl": {
            "type": "string",
            "description": "The image url of the item in the basket"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the article"
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price of the article"
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price of the article"
          },
          "discount": {
            "type": "number",
            "description": "It is negative value between -999999999999999998 and -1"
          }
        },
        "description": "Basket of the customer (only mandatory for Klarna Orders)"
      },
      "IntermediateSigningKey": {
        "title": "IntermediateSigningKey",
        "type": "object",
        "properties": {
          "signedKey": {
            "type": "string",
            "description": "signed key as provided by google."
          },
          "signatures": {
            "type": "string",
            "description": "signatures as provided by google."
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "field": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ArticleTypeEnum": {
        "title": "ArticleTypeEnum",
        "type": "string",
        "description": "This is the type of the article. Required for Klarna and optional for all other payment methods.",
        "enum": [
          "physical",
          "digital",
          "discount",
          "shipping_fee",
          "gift_card"
        ]
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "Basic",
        "description": "Authorization: Basic base64(merchantId:apiKey)"
      }
    }
  }
}
